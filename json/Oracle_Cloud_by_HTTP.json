{
    "zabbix_export": {
        "version": "7.0",
        "template_groups": [
            {
                "uuid": "c2c162144c2d4c5491c8801193af4945",
                "name": "Templates/Cloud"
            }
        ],
        "host_groups": [
            {
                "uuid": "a571c0d144b14fd4a87a9d9b2aa9fcd6",
                "name": "Applications"
            },
            {
                "uuid": "748ad4d098d447d492bb935c907f652f",
                "name": "Databases"
            },
            {
                "uuid": "137f19e6e2dc4219b33553b812627bc2",
                "name": "Virtual machines"
            }
        ],
        "templates": [
            {
                "uuid": "057558a26d934b4683d73a7058499d62",
                "template": "Oracle Cloud by HTTP",
                "name": "Oracle Cloud by HTTP",
                "description": "Monitor resources of Oracle Cloud Infrastructure (OCI) services.\n\nThis template handles discovery of various OCI services.\n\nRead the template documentation prior to using this template.\n\nYou can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback\n\nGenerated by official Zabbix template tool \"Templator\"",
                "vendor": {
                    "name": "Zabbix",
                    "version": "7.0-0"
                },
                "groups": [
                    {
                        "name": "Templates/Cloud"
                    }
                ],
                "discovery_rules": [
                    {
                        "uuid": "72fa6dfedfd8497298c5930f48594e72",
                        "name": "Block volumes discovery",
                        "type": "SCRIPT",
                        "key": "oci.block.volumes.discovery",
                        "delay": "1h",
                        "params": "function validateZabbixParams(requiredParams, allParams) {\n\trequiredParams.forEach(function (field) {\n\t\tif (typeof allParams !== 'object' || typeof allParams[field] === 'undefined' || allParams[field] === '') {\n\t\t\tthrow 'Required param is not set: ' + field + '.';\n\t\t}\n\t});\n}\n\nfunction OCI(service, action, params) {\n\tthis.zabbixLogPrefix = '[ OCI ] [ ' + service + ' ] [ ' + action + ' ]';\n\tthis.request = new HttpRequest();\n\n\tthis.hash = function (string) {\n\t\treturn sha256(string);\n\t};\n\n\tthis.sign = function (string) {\n\t\treturn sign('sha256', params['private_key'], string);\n\t};\n\n\tthis.encode = function (hash) {\n\t\tconst hexArr = hash.match(/.{1,2}/g);\n\t\tvar uInt8Array = new Uint8Array(hexArr.length);\n\t\thexArr.forEach(function (hex, idx) {\n\t\t\tuInt8Array[idx] = parseInt(hex, 16);\n\t\t});\n\t\treturn btoa(uInt8Array);\n\t};\n\n\tthis.getDate = function () {\n\t\tconst weekdayShortList = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\tconst monthShortList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n\t\tconst today = new Date();\n\t\treturn weekdayShortList[today.getUTCDay()] + ', ' + today.getUTCDate() + ' ' + monthShortList[today.getUTCMonth()] + ' ' + today.getUTCFullYear() + ' ' + today.getUTCHours() + ':' + today.getUTCMinutes() + ':' + today.getUTCSeconds() + ' GMT';\n\t};\n\n\tthis.executeRequest = function (httpMethod, apiPath, apiParams, mql, namespace) {\n\t\tvar headers = '(request-target) date host';\n\t\tconst contentTypeHeader = 'content-type: application/json';\n\t\tconst dateHeader = 'date: ' + this.getDate();\n\t\tconst hostHeader = 'host: ' + params['api_host'];\n\t\tconst requestTarget = '(request-target): ' + httpMethod + ' ' + apiPath + apiParams;\n\t\tvar signingString = requestTarget + '\\n' + dateHeader + '\\n' + hostHeader;\n\t\tvar reqHeaders = [contentTypeHeader, dateHeader];\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar body = JSON.stringify({\n\t\t\t\t'namespace': namespace,\n\t\t\t\t'query': mql\n\t\t\t});\n\t\t\theaders = headers + ' x-content-sha256 content-type content-length';\n\t\t\tconst bodyHeader = 'x-content-sha256: ' + this.encode(this.hash(body));\n\t\t\tconst bodyLengthHeader = 'content-length: ' + body.length;\n\t\t\tsigningString = signingString + '\\n' + bodyHeader + '\\n' + contentTypeHeader + '\\n' + bodyLengthHeader;\n\t\t\treqHeaders.push(bodyHeader, bodyLengthHeader);\n\t\t}\n\n\t\tconst signature = this.encode(this.sign(signingString));\n\n\t\treqHeaders.push('Authorization: Signature version=\"1\",keyId=\"' + params['tenancy_ocid'] + '/' + params['user_ocid'] + '/' + params['fingerprint'] + '\",algorithm=\"rsa-sha256\",headers=\"' + headers + '\",signature=\"' + signature + '\"');\n\t\tfor (var header = 0, headerLength = reqHeaders.length; header < headerLength; header++) {\n\t\t\tthis.request.addHeader(reqHeaders[header]);\n\t\t}\n\n\t\tif (params['http_proxy']) {\n\t\t\tthis.request.setProxy(params['http_proxy']);\n\t\t\tZabbix.log(4, this.zabbixLogPrefix + ' Using http proxy: ' + params['http_proxy']);\n\t\t}\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar apiRateLimitExceeded = false;\n\t\t\tdo {\n\t\t\t\tconst response = this.request.post('https://' + params['api_host'] + apiPath + apiParams, body);\n\n\t\t\t\ttry {\n\t\t\t\t\tif (JSON.parse(response)['code'] === 'TooManyRequests') {\n\n\t\t\t\t\t\tapiRateLimitExceeded = true;\n\t\t\t\t\t\tZabbix.sleep(1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tapiRateLimitExceeded = false;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the response: ' + JSON.stringify(response));\n\t\t\t\t\tthrow 'Could not parse the response. See logs for more information.';\n\t\t\t\t}\n\t\t\t} while (apiRateLimitExceeded);\n\t\t} else {\n\t\t\tconst response = this.request.get('https://' + params['api_host'] + apiPath + apiParams);\n\t\t}\n\n\t\tthis.request.clearHeader();\n\n\t\tif (this.request.getStatus() === parseInt(params['http_status_code'])) {\n\t\t\treturn response;\n\t\t} else {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Unexpected HTTP response code: ' + this.request.getStatus());\n\t\t\tthrow 'Unexpected HTTP response code: ' + this.request.getStatus();\n\t\t}\n\t};\n\n\tthis.extractData = function (httpMethod, data, keys) {\n\t\ttry {\n\t\t\tdata = JSON.parse(data);\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the received JSON object: ' + data);\n\t\t\tthrow 'Could not parse received JSON object. See logs for more information.';\n\t\t}\n\n\t\tif (typeof keys == 'object') {\n\t\t\tvar returnBuffer = [];\n\t\t\tfor (var dataObj = 0, dataLength = data.length; dataObj < dataLength; dataObj++) {\n\n\t\t\t\tvar objectBuffer = {};\n\t\t\t\tfor (var key = 0, keysLength = keys.length; key < keysLength; key++) {\n\t\t\t\t\tif (data[dataObj][keys[key]] || data[dataObj][keys[key]] == null) {\n\t\t\t\t\t\tobjectBuffer[keys[key].match(/^[a-z]+$|[A-Z][a-z]+$/)[0].toLowerCase()] = data[dataObj][keys[key]];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Received an unexpected JSON object. Could not get value for key \"' + keys[key] + '\" in JSON: ' + JSON.stringify(data[dataObj]));\n\t\t\t\t\t\tthrow 'Received an unexpected JSON object. See logs for more information.';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturnBuffer.push(objectBuffer);\n\t\t\t}\n\t\t\treturn returnBuffer;\n\t\t}\n\n\t\ttry {\n\t\t\tif (httpMethod === 'get') {\n\t\t\t\treturn data[keys];\n\t\t\t} else {\n\t\t\t\tif (data.length === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tdata = data[0][keys];\n\t\t\t\treturn data[data.length - 1]['value'];\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not find key \"' + keys + '\" in JSON: ' + JSON.stringify(data));\n\t\t\tthrow 'Could not find required key in JSON object. See logs for more information.';\n\t\t}\n\t};\n}\n\n\nconst params = JSON.parse(value);\nvalidateZabbixParams(['tenancy_ocid', 'user_ocid', 'private_key', 'fingerprint', 'api_host', 'http_status_code'], params);\nvar oci = new OCI('Block volume', 'Get volumes', params);\n\nreturn JSON.stringify(oci.extractData('get', oci.executeRequest('get', '/20160918/volumes', '?compartmentId=' + encodeURIComponent(params['tenancy_ocid'])), ['id', 'displayName', 'lifecycleState', 'freeformTags']));",
                        "filter": {
                            "evaltype": "AND",
                            "conditions": [
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.VOLUME.BLOCK.DISCOVERY.NAME.MATCHES}",
                                    "formulaid": "A"
                                },
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.VOLUME.BLOCK.DISCOVERY.NAME.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "B"
                                },
                                {
                                    "macro": "{#STATE}",
                                    "value": "{$OCI.VOLUME.BLOCK.DISCOVERY.STATE.MATCHES}",
                                    "formulaid": "C"
                                },
                                {
                                    "macro": "{#STATE}",
                                    "value": "{$OCI.VOLUME.BLOCK.DISCOVERY.STATE.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "D"
                                }
                            ]
                        },
                        "description": "Discover block volumes.",
                        "host_prototypes": [
                            {
                                "uuid": "5030f7dadd5b40558e07a4545d7346bd",
                                "host": "OCI Block Volume - {#ID}",
                                "name": "OCI Block Volume - {#ID}",
                                "group_links": [
                                    {
                                        "group": {
                                            "name": "Applications"
                                        }
                                    }
                                ],
                                "templates": [
                                    {
                                        "name": "Oracle Cloud Block Volume by HTTP"
                                    }
                                ],
                                "macros": [
                                    {
                                        "macro": "{$OCI.VOLUME.BLOCK.ID}",
                                        "value": "{#ID}",
                                        "description": "Block volume ID."
                                    }
                                ],
                                "tags": [
                                    {
                                        "tag": "oci-block-vol-name",
                                        "value": "{#NAME}"
                                    }
                                ]
                            }
                        ],
                        "timeout": "10s",
                        "parameters": [
                            {
                                "name": "api_host",
                                "value": "{$OCI.API.CORE.HOST}"
                            },
                            {
                                "name": "fingerprint",
                                "value": "{$OCI.API.FINGERPRINT}"
                            },
                            {
                                "name": "http_proxy",
                                "value": "{$OCI.HTTP.PROXY}"
                            },
                            {
                                "name": "http_status_code",
                                "value": "{$OCI.HTTP.RETURN.CODE.OK}"
                            },
                            {
                                "name": "private_key",
                                "value": "{$OCI.API.PRIVATE.KEY}"
                            },
                            {
                                "name": "tenancy_ocid",
                                "value": "{$OCI.API.TENANCY}"
                            },
                            {
                                "name": "user_ocid",
                                "value": "{$OCI.API.USER}"
                            }
                        ],
                        "lld_macro_paths": [
                            {
                                "lld_macro": "{#ID}",
                                "path": "$.id"
                            },
                            {
                                "lld_macro": "{#NAME}",
                                "path": "$.name"
                            },
                            {
                                "lld_macro": "{#STATE}",
                                "path": "$.state"
                            }
                        ]
                    },
                    {
                        "uuid": "90982afdf2f9430bb1c5a3755d8e6c6d",
                        "name": "Boot volumes discovery",
                        "type": "SCRIPT",
                        "key": "oci.boot.volumes.discovery",
                        "delay": "1h",
                        "params": "function validateZabbixParams(requiredParams, allParams) {\n\trequiredParams.forEach(function (field) {\n\t\tif (typeof allParams !== 'object' || typeof allParams[field] === 'undefined' || allParams[field] === '') {\n\t\t\tthrow 'Required param is not set: ' + field + '.';\n\t\t}\n\t});\n}\n\nfunction OCI(service, action, params) {\n\tthis.zabbixLogPrefix = '[ OCI ] [ ' + service + ' ] [ ' + action + ' ]';\n\tthis.request = new HttpRequest();\n\n\tthis.hash = function (string) {\n\t\treturn sha256(string);\n\t};\n\n\tthis.sign = function (string) {\n\t\treturn sign('sha256', params['private_key'], string);\n\t};\n\n\tthis.encode = function (hash) {\n\t\tconst hexArr = hash.match(/.{1,2}/g);\n\t\tvar uInt8Array = new Uint8Array(hexArr.length);\n\t\thexArr.forEach(function (hex, idx) {\n\t\t\tuInt8Array[idx] = parseInt(hex, 16);\n\t\t});\n\t\treturn btoa(uInt8Array);\n\t};\n\n\tthis.getDate = function () {\n\t\tconst weekdayShortList = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\tconst monthShortList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n\t\tconst today = new Date();\n\t\treturn weekdayShortList[today.getUTCDay()] + ', ' + today.getUTCDate() + ' ' + monthShortList[today.getUTCMonth()] + ' ' + today.getUTCFullYear() + ' ' + today.getUTCHours() + ':' + today.getUTCMinutes() + ':' + today.getUTCSeconds() + ' GMT';\n\t};\n\n\tthis.executeRequest = function (httpMethod, apiPath, apiParams, mql, namespace) {\n\t\tvar headers = '(request-target) date host';\n\t\tconst contentTypeHeader = 'content-type: application/json';\n\t\tconst dateHeader = 'date: ' + this.getDate();\n\t\tconst hostHeader = 'host: ' + params['api_host'];\n\t\tconst requestTarget = '(request-target): ' + httpMethod + ' ' + apiPath + apiParams;\n\t\tvar signingString = requestTarget + '\\n' + dateHeader + '\\n' + hostHeader;\n\t\tvar reqHeaders = [contentTypeHeader, dateHeader];\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar body = JSON.stringify({\n\t\t\t\t'namespace': namespace,\n\t\t\t\t'query': mql\n\t\t\t});\n\t\t\theaders = headers + ' x-content-sha256 content-type content-length';\n\t\t\tconst bodyHeader = 'x-content-sha256: ' + this.encode(this.hash(body));\n\t\t\tconst bodyLengthHeader = 'content-length: ' + body.length;\n\t\t\tsigningString = signingString + '\\n' + bodyHeader + '\\n' + contentTypeHeader + '\\n' + bodyLengthHeader;\n\t\t\treqHeaders.push(bodyHeader, bodyLengthHeader);\n\t\t}\n\n\t\tconst signature = this.encode(this.sign(signingString));\n\n\t\treqHeaders.push('Authorization: Signature version=\"1\",keyId=\"' + params['tenancy_ocid'] + '/' + params['user_ocid'] + '/' + params['fingerprint'] + '\",algorithm=\"rsa-sha256\",headers=\"' + headers + '\",signature=\"' + signature + '\"');\n\t\tfor (var header = 0, headerLength = reqHeaders.length; header < headerLength; header++) {\n\t\t\tthis.request.addHeader(reqHeaders[header]);\n\t\t}\n\n\t\tif (params['http_proxy']) {\n\t\t\tthis.request.setProxy(params['http_proxy']);\n\t\t\tZabbix.log(4, this.zabbixLogPrefix + ' Using http proxy: ' + params['http_proxy']);\n\t\t}\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar apiRateLimitExceeded = false;\n\t\t\tdo {\n\t\t\t\tconst response = this.request.post('https://' + params['api_host'] + apiPath + apiParams, body);\n\n\t\t\t\ttry {\n\t\t\t\t\tif (JSON.parse(response)['code'] === 'TooManyRequests') {\n\n\t\t\t\t\t\tapiRateLimitExceeded = true;\n\t\t\t\t\t\tZabbix.sleep(1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tapiRateLimitExceeded = false;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the response: ' + JSON.stringify(response));\n\t\t\t\t\tthrow 'Could not parse the response. See logs for more information.';\n\t\t\t\t}\n\t\t\t} while (apiRateLimitExceeded);\n\t\t} else {\n\t\t\tconst response = this.request.get('https://' + params['api_host'] + apiPath + apiParams);\n\t\t}\n\n\t\tthis.request.clearHeader();\n\n\t\tif (this.request.getStatus() === parseInt(params['http_status_code'])) {\n\t\t\treturn response;\n\t\t} else {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Unexpected HTTP response code: ' + this.request.getStatus());\n\t\t\tthrow 'Unexpected HTTP response code: ' + this.request.getStatus();\n\t\t}\n\t};\n\n\tthis.extractData = function (httpMethod, data, keys) {\n\t\ttry {\n\t\t\tdata = JSON.parse(data);\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the received JSON object: ' + data);\n\t\t\tthrow 'Could not parse received JSON object. See logs for more information.';\n\t\t}\n\n\t\tif (typeof keys == 'object') {\n\t\t\tvar returnBuffer = [];\n\t\t\tfor (var dataObj = 0, dataLength = data.length; dataObj < dataLength; dataObj++) {\n\n\t\t\t\tvar objectBuffer = {};\n\t\t\t\tfor (var key = 0, keysLength = keys.length; key < keysLength; key++) {\n\t\t\t\t\tif (data[dataObj][keys[key]] || data[dataObj][keys[key]] == null) {\n\t\t\t\t\t\tobjectBuffer[keys[key].match(/^[a-z]+$|[A-Z][a-z]+$/)[0].toLowerCase()] = data[dataObj][keys[key]];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Received an unexpected JSON object. Could not get value for key \"' + keys[key] + '\" in JSON: ' + JSON.stringify(data[dataObj]));\n\t\t\t\t\t\tthrow 'Received an unexpected JSON object. See logs for more information.';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturnBuffer.push(objectBuffer);\n\t\t\t}\n\t\t\treturn returnBuffer;\n\t\t}\n\n\t\ttry {\n\t\t\tif (httpMethod === 'get') {\n\t\t\t\treturn data[keys];\n\t\t\t} else {\n\t\t\t\tif (data.length === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tdata = data[0][keys];\n\t\t\t\treturn data[data.length - 1]['value'];\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not find key \"' + keys + '\" in JSON: ' + JSON.stringify(data));\n\t\t\tthrow 'Could not find required key in JSON object. See logs for more information.';\n\t\t}\n\t};\n}\n\n\nconst params = JSON.parse(value);\nvalidateZabbixParams(['tenancy_ocid', 'user_ocid', 'private_key', 'fingerprint', 'api_host', 'http_status_code'], params);\nvar oci = new OCI('Boot volume', 'Get volumes', params);\n\nreturn JSON.stringify(oci.extractData('get', oci.executeRequest('get', '/20160918/bootVolumes', '?compartmentId=' + encodeURIComponent(params['tenancy_ocid'])), ['id', 'displayName', 'lifecycleState', 'freeformTags']));",
                        "filter": {
                            "evaltype": "AND",
                            "conditions": [
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.VOLUME.BOOT.DISCOVERY.NAME.MATCHES}",
                                    "formulaid": "A"
                                },
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.VOLUME.BOOT.DISCOVERY.NAME.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "B"
                                },
                                {
                                    "macro": "{#STATE}",
                                    "value": "{$OCI.VOLUME.BOOT.DISCOVERY.STATE.MATCHES}",
                                    "formulaid": "C"
                                },
                                {
                                    "macro": "{#STATE}",
                                    "value": "{$OCI.VOLUME.BOOT.DISCOVERY.STATE.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "D"
                                }
                            ]
                        },
                        "description": "Discover boot volumes.",
                        "host_prototypes": [
                            {
                                "uuid": "914b808a4a014f6e824a3b9c53f1b492",
                                "host": "OCI Boot Volume - {#ID}",
                                "name": "OCI Boot Volume - {#ID}",
                                "group_links": [
                                    {
                                        "group": {
                                            "name": "Applications"
                                        }
                                    }
                                ],
                                "templates": [
                                    {
                                        "name": "Oracle Cloud Boot Volume by HTTP"
                                    }
                                ],
                                "macros": [
                                    {
                                        "macro": "{$OCI.VOLUME.BOOT.ID}",
                                        "value": "{#ID}",
                                        "description": "Boot volume ID."
                                    }
                                ],
                                "tags": [
                                    {
                                        "tag": "oci-boot-vol-name",
                                        "value": "{#NAME}"
                                    }
                                ]
                            }
                        ],
                        "timeout": "10s",
                        "parameters": [
                            {
                                "name": "api_host",
                                "value": "{$OCI.API.CORE.HOST}"
                            },
                            {
                                "name": "fingerprint",
                                "value": "{$OCI.API.FINGERPRINT}"
                            },
                            {
                                "name": "http_proxy",
                                "value": "{$OCI.HTTP.PROXY}"
                            },
                            {
                                "name": "http_status_code",
                                "value": "{$OCI.HTTP.RETURN.CODE.OK}"
                            },
                            {
                                "name": "private_key",
                                "value": "{$OCI.API.PRIVATE.KEY}"
                            },
                            {
                                "name": "tenancy_ocid",
                                "value": "{$OCI.API.TENANCY}"
                            },
                            {
                                "name": "user_ocid",
                                "value": "{$OCI.API.USER}"
                            }
                        ],
                        "lld_macro_paths": [
                            {
                                "lld_macro": "{#ID}",
                                "path": "$.id"
                            },
                            {
                                "lld_macro": "{#NAME}",
                                "path": "$.name"
                            },
                            {
                                "lld_macro": "{#STATE}",
                                "path": "$.state"
                            }
                        ]
                    },
                    {
                        "uuid": "ea4bbd0e9737406693aa0051cf861115",
                        "name": "Compute instances discovery",
                        "type": "SCRIPT",
                        "key": "oci.compute.discovery",
                        "delay": "1h",
                        "params": "function validateZabbixParams(requiredParams, allParams) {\n\trequiredParams.forEach(function (field) {\n\t\tif (typeof allParams !== 'object' || typeof allParams[field] === 'undefined' || allParams[field] === '') {\n\t\t\tthrow 'Required param is not set: ' + field + '.';\n\t\t}\n\t});\n}\n\nfunction OCI(service, action, params) {\n\tthis.zabbixLogPrefix = '[ OCI ] [ ' + service + ' ] [ ' + action + ' ]';\n\tthis.request = new HttpRequest();\n\n\tthis.hash = function (string) {\n\t\treturn sha256(string);\n\t};\n\n\tthis.sign = function (string) {\n\t\treturn sign('sha256', params['private_key'], string);\n\t};\n\n\tthis.encode = function (hash) {\n\t\tconst hexArr = hash.match(/.{1,2}/g);\n\t\tvar uInt8Array = new Uint8Array(hexArr.length);\n\t\thexArr.forEach(function (hex, idx) {\n\t\t\tuInt8Array[idx] = parseInt(hex, 16);\n\t\t});\n\t\treturn btoa(uInt8Array);\n\t};\n\n\tthis.getDate = function () {\n\t\tconst weekdayShortList = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\tconst monthShortList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n\t\tconst today = new Date();\n\t\treturn weekdayShortList[today.getUTCDay()] + ', ' + today.getUTCDate() + ' ' + monthShortList[today.getUTCMonth()] + ' ' + today.getUTCFullYear() + ' ' + today.getUTCHours() + ':' + today.getUTCMinutes() + ':' + today.getUTCSeconds() + ' GMT';\n\t};\n\n\tthis.executeRequest = function (httpMethod, apiPath, apiParams, mql, namespace) {\n\t\tvar headers = '(request-target) date host';\n\t\tconst contentTypeHeader = 'content-type: application/json';\n\t\tconst dateHeader = 'date: ' + this.getDate();\n\t\tconst hostHeader = 'host: ' + params['api_host'];\n\t\tconst requestTarget = '(request-target): ' + httpMethod + ' ' + apiPath + apiParams;\n\t\tvar signingString = requestTarget + '\\n' + dateHeader + '\\n' + hostHeader;\n\t\tvar reqHeaders = [contentTypeHeader, dateHeader];\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar body = JSON.stringify({\n\t\t\t\t'namespace': namespace,\n\t\t\t\t'query': mql\n\t\t\t});\n\t\t\theaders = headers + ' x-content-sha256 content-type content-length';\n\t\t\tconst bodyHeader = 'x-content-sha256: ' + this.encode(this.hash(body));\n\t\t\tconst bodyLengthHeader = 'content-length: ' + body.length;\n\t\t\tsigningString = signingString + '\\n' + bodyHeader + '\\n' + contentTypeHeader + '\\n' + bodyLengthHeader;\n\t\t\treqHeaders.push(bodyHeader, bodyLengthHeader);\n\t\t}\n\n\t\tconst signature = this.encode(this.sign(signingString));\n\n\t\treqHeaders.push('Authorization: Signature version=\"1\",keyId=\"' + params['tenancy_ocid'] + '/' + params['user_ocid'] + '/' + params['fingerprint'] + '\",algorithm=\"rsa-sha256\",headers=\"' + headers + '\",signature=\"' + signature + '\"');\n\t\tfor (var header = 0, headerLength = reqHeaders.length; header < headerLength; header++) {\n\t\t\tthis.request.addHeader(reqHeaders[header]);\n\t\t}\n\n\t\tif (params['http_proxy']) {\n\t\t\tthis.request.setProxy(params['http_proxy']);\n\t\t\tZabbix.log(4, this.zabbixLogPrefix + ' Using http proxy: ' + params['http_proxy']);\n\t\t}\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar apiRateLimitExceeded = false;\n\t\t\tdo {\n\t\t\t\tconst response = this.request.post('https://' + params['api_host'] + apiPath + apiParams, body);\n\n\t\t\t\ttry {\n\t\t\t\t\tif (JSON.parse(response)['code'] === 'TooManyRequests') {\n\n\t\t\t\t\t\tapiRateLimitExceeded = true;\n\t\t\t\t\t\tZabbix.sleep(1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tapiRateLimitExceeded = false;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the response: ' + JSON.stringify(response));\n\t\t\t\t\tthrow 'Could not parse the response. See logs for more information.';\n\t\t\t\t}\n\t\t\t} while (apiRateLimitExceeded);\n\t\t} else {\n\t\t\tconst response = this.request.get('https://' + params['api_host'] + apiPath + apiParams);\n\t\t}\n\n\t\tthis.request.clearHeader();\n\n\t\tif (this.request.getStatus() === parseInt(params['http_status_code'])) {\n\t\t\treturn response;\n\t\t} else {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Unexpected HTTP response code: ' + this.request.getStatus());\n\t\t\tthrow 'Unexpected HTTP response code: ' + this.request.getStatus();\n\t\t}\n\t};\n\n\tthis.extractData = function (httpMethod, data, keys) {\n\t\ttry {\n\t\t\tdata = JSON.parse(data);\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the received JSON object: ' + data);\n\t\t\tthrow 'Could not parse received JSON object. See logs for more information.';\n\t\t}\n\n\t\tif (typeof keys == 'object') {\n\t\t\tvar returnBuffer = [];\n\t\t\tfor (var dataObj = 0, dataLength = data.length; dataObj < dataLength; dataObj++) {\n\n\t\t\t\tvar objectBuffer = {};\n\t\t\t\tfor (var key = 0, keysLength = keys.length; key < keysLength; key++) {\n\t\t\t\t\tif (data[dataObj][keys[key]] || data[dataObj][keys[key]] == null) {\n\t\t\t\t\t\tobjectBuffer[keys[key].match(/^[a-z]+$|[A-Z][a-z]+$/)[0].toLowerCase()] = data[dataObj][keys[key]];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Received an unexpected JSON object. Could not get value for key \"' + keys[key] + '\" in JSON: ' + JSON.stringify(data[dataObj]));\n\t\t\t\t\t\tthrow 'Received an unexpected JSON object. See logs for more information.';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturnBuffer.push(objectBuffer);\n\t\t\t}\n\t\t\treturn returnBuffer;\n\t\t}\n\n\t\ttry {\n\t\t\tif (httpMethod === 'get') {\n\t\t\t\treturn data[keys];\n\t\t\t} else {\n\t\t\t\tif (data.length === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tdata = data[0][keys];\n\t\t\t\treturn data[data.length - 1]['value'];\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not find key \"' + keys + '\" in JSON: ' + JSON.stringify(data));\n\t\t\tthrow 'Could not find required key in JSON object. See logs for more information.';\n\t\t}\n\t};\n}\n\n\nconst params = JSON.parse(value);\nvalidateZabbixParams(['tenancy_ocid', 'user_ocid', 'private_key', 'fingerprint', 'api_host', 'http_status_code'], params);\nvar oci = new OCI('Compute', 'Get instances', params);\n\nreturn JSON.stringify(oci.extractData('get', oci.executeRequest('get', '/20160918/instances', '?compartmentId=' + encodeURIComponent(params['tenancy_ocid'])), ['id', 'displayName', 'lifecycleState', 'freeformTags', 'availabilityDomain']));",
                        "filter": {
                            "evaltype": "AND",
                            "conditions": [
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.COMPUTE.DISCOVERY.NAME.MATCHES}",
                                    "formulaid": "A"
                                },
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.COMPUTE.DISCOVERY.NAME.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "B"
                                },
                                {
                                    "macro": "{#STATE}",
                                    "value": "{$OCI.COMPUTE.DISCOVERY.STATE.MATCHES}",
                                    "formulaid": "C"
                                },
                                {
                                    "macro": "{#STATE}",
                                    "value": "{$OCI.COMPUTE.DISCOVERY.STATE.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "D"
                                }
                            ]
                        },
                        "description": "Discover compute instances.",
                        "host_prototypes": [
                            {
                                "uuid": "9337374066e04291b2f94f8ad5470f54",
                                "host": "OCI Compute - {#ID}",
                                "name": "OCI Compute - {#ID}",
                                "group_links": [
                                    {
                                        "group": {
                                            "name": "Virtual machines"
                                        }
                                    }
                                ],
                                "templates": [
                                    {
                                        "name": "Oracle Cloud Compute by HTTP"
                                    }
                                ],
                                "macros": [
                                    {
                                        "macro": "{$OCI.COMPUTE.AVAILABILITY.DOMAIN}",
                                        "value": "{#DOMAIN}",
                                        "description": "Availability domain for instance."
                                    },
                                    {
                                        "macro": "{$OCI.COMPUTE.INSTANCE.ID}",
                                        "value": "{#ID}",
                                        "description": "ID of OCI compute instance."
                                    }
                                ],
                                "tags": [
                                    {
                                        "tag": "oci-compute-name",
                                        "value": "{#NAME}"
                                    }
                                ]
                            }
                        ],
                        "timeout": "10s",
                        "parameters": [
                            {
                                "name": "api_host",
                                "value": "{$OCI.API.CORE.HOST}"
                            },
                            {
                                "name": "fingerprint",
                                "value": "{$OCI.API.FINGERPRINT}"
                            },
                            {
                                "name": "http_proxy",
                                "value": "{$OCI.HTTP.PROXY}"
                            },
                            {
                                "name": "http_status_code",
                                "value": "{$OCI.HTTP.RETURN.CODE.OK}"
                            },
                            {
                                "name": "private_key",
                                "value": "{$OCI.API.PRIVATE.KEY}"
                            },
                            {
                                "name": "tenancy_ocid",
                                "value": "{$OCI.API.TENANCY}"
                            },
                            {
                                "name": "user_ocid",
                                "value": "{$OCI.API.USER}"
                            }
                        ],
                        "lld_macro_paths": [
                            {
                                "lld_macro": "{#DOMAIN}",
                                "path": "$.domain"
                            },
                            {
                                "lld_macro": "{#ID}",
                                "path": "$.id"
                            },
                            {
                                "lld_macro": "{#NAME}",
                                "path": "$.name"
                            },
                            {
                                "lld_macro": "{#STATE}",
                                "path": "$.state"
                            }
                        ]
                    },
                    {
                        "uuid": "c69611c5b86043b28c8ce2bc0627b377",
                        "name": "Autonomous database discovery",
                        "type": "SCRIPT",
                        "key": "oci.object.autonomous.db.discovery",
                        "delay": "1h",
                        "params": "function validateZabbixParams(requiredParams, allParams) {\n\trequiredParams.forEach(function (field) {\n\t\tif (typeof allParams !== 'object' || typeof allParams[field] === 'undefined' || allParams[field] === '') {\n\t\t\tthrow 'Required param is not set: ' + field + '.';\n\t\t}\n\t});\n}\n\nfunction OCI(service, action, params) {\n\tthis.zabbixLogPrefix = '[ OCI ] [ ' + service + ' ] [ ' + action + ' ]';\n\tthis.request = new HttpRequest();\n\n\tthis.hash = function (string) {\n\t\treturn sha256(string);\n\t};\n\n\tthis.sign = function (string) {\n\t\treturn sign('sha256', params['private_key'], string);\n\t};\n\n\tthis.encode = function (hash) {\n\t\tconst hexArr = hash.match(/.{1,2}/g);\n\t\tvar uInt8Array = new Uint8Array(hexArr.length);\n\t\thexArr.forEach(function (hex, idx) {\n\t\t\tuInt8Array[idx] = parseInt(hex, 16);\n\t\t});\n\t\treturn btoa(uInt8Array);\n\t};\n\n\tthis.getDate = function () {\n\t\tconst weekdayShortList = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\tconst monthShortList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n\t\tconst today = new Date();\n\t\treturn weekdayShortList[today.getUTCDay()] + ', ' + today.getUTCDate() + ' ' + monthShortList[today.getUTCMonth()] + ' ' + today.getUTCFullYear() + ' ' + today.getUTCHours() + ':' + today.getUTCMinutes() + ':' + today.getUTCSeconds() + ' GMT';\n\t};\n\n\tthis.executeRequest = function (httpMethod, apiPath, apiParams, mql, namespace) {\n\t\tvar headers = '(request-target) date host';\n\t\tconst contentTypeHeader = 'content-type: application/json';\n\t\tconst dateHeader = 'date: ' + this.getDate();\n\t\tconst hostHeader = 'host: ' + params['api_host'];\n\t\tconst requestTarget = '(request-target): ' + httpMethod + ' ' + apiPath + apiParams;\n\t\tvar signingString = requestTarget + '\\n' + dateHeader + '\\n' + hostHeader;\n\t\tvar reqHeaders = [contentTypeHeader, dateHeader];\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar body = JSON.stringify({\n\t\t\t\t'namespace': namespace,\n\t\t\t\t'query': mql\n\t\t\t});\n\t\t\theaders = headers + ' x-content-sha256 content-type content-length';\n\t\t\tconst bodyHeader = 'x-content-sha256: ' + this.encode(this.hash(body));\n\t\t\tconst bodyLengthHeader = 'content-length: ' + body.length;\n\t\t\tsigningString = signingString + '\\n' + bodyHeader + '\\n' + contentTypeHeader + '\\n' + bodyLengthHeader;\n\t\t\treqHeaders.push(bodyHeader, bodyLengthHeader);\n\t\t}\n\n\t\tconst signature = this.encode(this.sign(signingString));\n\n\t\treqHeaders.push('Authorization: Signature version=\"1\",keyId=\"' + params['tenancy_ocid'] + '/' + params['user_ocid'] + '/' + params['fingerprint'] + '\",algorithm=\"rsa-sha256\",headers=\"' + headers + '\",signature=\"' + signature + '\"');\n\t\tfor (var header = 0, headerLength = reqHeaders.length; header < headerLength; header++) {\n\t\t\tthis.request.addHeader(reqHeaders[header]);\n\t\t}\n\n\t\tif (params['http_proxy']) {\n\t\t\tthis.request.setProxy(params['http_proxy']);\n\t\t\tZabbix.log(4, this.zabbixLogPrefix + ' Using http proxy: ' + params['http_proxy']);\n\t\t}\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar apiRateLimitExceeded = false;\n\t\t\tdo {\n\t\t\t\tconst response = this.request.post('https://' + params['api_host'] + apiPath + apiParams, body);\n\n\t\t\t\ttry {\n\t\t\t\t\tif (JSON.parse(response)['code'] === 'TooManyRequests') {\n\n\t\t\t\t\t\tapiRateLimitExceeded = true;\n\t\t\t\t\t\tZabbix.sleep(1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tapiRateLimitExceeded = false;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the response: ' + JSON.stringify(response));\n\t\t\t\t\tthrow 'Could not parse the response. See logs for more information.';\n\t\t\t\t}\n\t\t\t} while (apiRateLimitExceeded);\n\t\t} else {\n\t\t\tconst response = this.request.get('https://' + params['api_host'] + apiPath + apiParams);\n\t\t}\n\n\t\tthis.request.clearHeader();\n\n\t\tif (this.request.getStatus() === parseInt(params['http_status_code'])) {\n\t\t\treturn response;\n\t\t} else {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Unexpected HTTP response code: ' + this.request.getStatus());\n\t\t\tthrow 'Unexpected HTTP response code: ' + this.request.getStatus();\n\t\t}\n\t};\n\n\tthis.extractData = function (httpMethod, data, keys) {\n\t\ttry {\n\t\t\tdata = JSON.parse(data);\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the received JSON object: ' + data);\n\t\t\tthrow 'Could not parse received JSON object. See logs for more information.';\n\t\t}\n\n\t\tif (typeof keys == 'object') {\n\t\t\tvar returnBuffer = [];\n\t\t\tfor (var dataObj = 0, dataLength = data.length; dataObj < dataLength; dataObj++) {\n\n\t\t\t\tvar objectBuffer = {};\n\t\t\t\tfor (var key = 0, keysLength = keys.length; key < keysLength; key++) {\n\t\t\t\t\tif (data[dataObj][keys[key]] || data[dataObj][keys[key]] == null) {\n\t\t\t\t\t\tobjectBuffer[keys[key].match(/^[a-z]+$|[A-Z][a-z]+$/)[0].toLowerCase()] = data[dataObj][keys[key]];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Received an unexpected JSON object. Could not get value for key \"' + keys[key] + '\" in JSON: ' + JSON.stringify(data[dataObj]));\n\t\t\t\t\t\tthrow 'Received an unexpected JSON object. See logs for more information.';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturnBuffer.push(objectBuffer);\n\t\t\t}\n\t\t\treturn returnBuffer;\n\t\t}\n\n\t\ttry {\n\t\t\tif (httpMethod === 'get') {\n\t\t\t\treturn data[keys];\n\t\t\t} else {\n\t\t\t\tif (data.length === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tdata = data[0][keys];\n\t\t\t\treturn data[data.length - 1]['value'];\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not find key \"' + keys + '\" in JSON: ' + JSON.stringify(data));\n\t\t\tthrow 'Could not find required key in JSON object. See logs for more information.';\n\t\t}\n\t};\n}\n\n\nconst params = JSON.parse(value);\nvalidateZabbixParams(['tenancy_ocid', 'user_ocid', 'private_key', 'fingerprint', 'api_host', 'http_status_code'], params);\nvar oci = new OCI('Autonomous DB', 'Get DBs', params);\n\nreturn JSON.stringify(oci.extractData('get', oci.executeRequest('get', '/20160918/autonomousDatabases', '?compartmentId=' + encodeURIComponent(params['tenancy_ocid'])), ['id', 'dbName', 'lifecycleState', 'freeformTags']));",
                        "filter": {
                            "evaltype": "AND",
                            "conditions": [
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.AUTONOMOUS.DB.DISCOVERY.NAME.MATCHES}",
                                    "formulaid": "A"
                                },
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.AUTONOMOUS.DB.DISCOVERY.NAME.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "B"
                                },
                                {
                                    "macro": "{#STATE}",
                                    "value": "{$OCI.AUTONOMOUS.DB.DISCOVERY.STATE.MATCHES}",
                                    "formulaid": "C"
                                },
                                {
                                    "macro": "{#STATE}",
                                    "value": "{$OCI.AUTONOMOUS.DB.DISCOVERY.STATE.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "D"
                                }
                            ]
                        },
                        "description": "Discover autonomous databases.",
                        "host_prototypes": [
                            {
                                "uuid": "88d0076a057c441ab5a531cfcb650e84",
                                "host": "OCI Autonomous DB - {#NAME}",
                                "name": "OCI Autonomous DB - {#NAME}",
                                "group_links": [
                                    {
                                        "group": {
                                            "name": "Databases"
                                        }
                                    }
                                ],
                                "templates": [
                                    {
                                        "name": "Oracle Cloud Autonomous Database by HTTP"
                                    }
                                ],
                                "macros": [
                                    {
                                        "macro": "{$OCI.AUTONOMOUS.DB.ID}",
                                        "value": "{#ID}",
                                        "description": "ID of OCI autonomous database."
                                    }
                                ],
                                "tags": [
                                    {
                                        "tag": "oci-aut-db-name",
                                        "value": "{#NAME}"
                                    }
                                ]
                            }
                        ],
                        "timeout": "10s",
                        "parameters": [
                            {
                                "name": "api_host",
                                "value": "{$OCI.API.AUTONOMOUS.DB.HOST}"
                            },
                            {
                                "name": "fingerprint",
                                "value": "{$OCI.API.FINGERPRINT}"
                            },
                            {
                                "name": "http_proxy",
                                "value": "{$OCI.HTTP.PROXY}"
                            },
                            {
                                "name": "http_status_code",
                                "value": "{$OCI.HTTP.RETURN.CODE.OK}"
                            },
                            {
                                "name": "private_key",
                                "value": "{$OCI.API.PRIVATE.KEY}"
                            },
                            {
                                "name": "tenancy_ocid",
                                "value": "{$OCI.API.TENANCY}"
                            },
                            {
                                "name": "user_ocid",
                                "value": "{$OCI.API.USER}"
                            }
                        ],
                        "lld_macro_paths": [
                            {
                                "lld_macro": "{#ID}",
                                "path": "$.id"
                            },
                            {
                                "lld_macro": "{#NAME}",
                                "path": "$.name"
                            },
                            {
                                "lld_macro": "{#STATE}",
                                "path": "$.state"
                            }
                        ]
                    },
                    {
                        "uuid": "e1949f127af04efeb8c192f23e45b58a",
                        "name": "Object storage discovery",
                        "type": "SCRIPT",
                        "key": "oci.object.storage.discovery",
                        "delay": "1h",
                        "params": "function validateZabbixParams(requiredParams, allParams) {\n\trequiredParams.forEach(function (field) {\n\t\tif (typeof allParams !== 'object' || typeof allParams[field] === 'undefined' || allParams[field] === '') {\n\t\t\tthrow 'Required param is not set: ' + field + '.';\n\t\t}\n\t});\n}\n\nfunction OCI(service, action, params) {\n\tthis.zabbixLogPrefix = '[ OCI ] [ ' + service + ' ] [ ' + action + ' ]';\n\tthis.request = new HttpRequest();\n\n\tthis.hash = function (string) {\n\t\treturn sha256(string);\n\t};\n\n\tthis.sign = function (string) {\n\t\treturn sign('sha256', params['private_key'], string);\n\t};\n\n\tthis.encode = function (hash) {\n\t\tconst hexArr = hash.match(/.{1,2}/g);\n\t\tvar uInt8Array = new Uint8Array(hexArr.length);\n\t\thexArr.forEach(function (hex, idx) {\n\t\t\tuInt8Array[idx] = parseInt(hex, 16);\n\t\t});\n\t\treturn btoa(uInt8Array);\n\t};\n\n\tthis.getDate = function () {\n\t\tconst weekdayShortList = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\tconst monthShortList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n\t\tconst today = new Date();\n\t\treturn weekdayShortList[today.getUTCDay()] + ', ' + today.getUTCDate() + ' ' + monthShortList[today.getUTCMonth()] + ' ' + today.getUTCFullYear() + ' ' + today.getUTCHours() + ':' + today.getUTCMinutes() + ':' + today.getUTCSeconds() + ' GMT';\n\t};\n\n\tthis.executeRequest = function (httpMethod, apiPath, apiParams, mql, namespace) {\n\t\tvar headers = '(request-target) date host';\n\t\tconst contentTypeHeader = 'content-type: application/json';\n\t\tconst dateHeader = 'date: ' + this.getDate();\n\t\tconst hostHeader = 'host: ' + params['api_host'];\n\t\tconst requestTarget = '(request-target): ' + httpMethod + ' ' + apiPath + apiParams;\n\t\tvar signingString = requestTarget + '\\n' + dateHeader + '\\n' + hostHeader;\n\t\tvar reqHeaders = [contentTypeHeader, dateHeader];\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar body = JSON.stringify({\n\t\t\t\t'namespace': namespace,\n\t\t\t\t'query': mql\n\t\t\t});\n\t\t\theaders = headers + ' x-content-sha256 content-type content-length';\n\t\t\tconst bodyHeader = 'x-content-sha256: ' + this.encode(this.hash(body));\n\t\t\tconst bodyLengthHeader = 'content-length: ' + body.length;\n\t\t\tsigningString = signingString + '\\n' + bodyHeader + '\\n' + contentTypeHeader + '\\n' + bodyLengthHeader;\n\t\t\treqHeaders.push(bodyHeader, bodyLengthHeader);\n\t\t}\n\n\t\tconst signature = this.encode(this.sign(signingString));\n\n\t\treqHeaders.push('Authorization: Signature version=\"1\",keyId=\"' + params['tenancy_ocid'] + '/' + params['user_ocid'] + '/' + params['fingerprint'] + '\",algorithm=\"rsa-sha256\",headers=\"' + headers + '\",signature=\"' + signature + '\"');\n\t\tfor (var header = 0, headerLength = reqHeaders.length; header < headerLength; header++) {\n\t\t\tthis.request.addHeader(reqHeaders[header]);\n\t\t}\n\n\t\tif (params['http_proxy']) {\n\t\t\tthis.request.setProxy(params['http_proxy']);\n\t\t\tZabbix.log(4, this.zabbixLogPrefix + ' Using http proxy: ' + params['http_proxy']);\n\t\t}\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar apiRateLimitExceeded = false;\n\t\t\tdo {\n\t\t\t\tconst response = this.request.post('https://' + params['api_host'] + apiPath + apiParams, body);\n\n\t\t\t\ttry {\n\t\t\t\t\tif (JSON.parse(response)['code'] === 'TooManyRequests') {\n\n\t\t\t\t\t\tapiRateLimitExceeded = true;\n\t\t\t\t\t\tZabbix.sleep(1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tapiRateLimitExceeded = false;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the response: ' + JSON.stringify(response));\n\t\t\t\t\tthrow 'Could not parse the response. See logs for more information.';\n\t\t\t\t}\n\t\t\t} while (apiRateLimitExceeded);\n\t\t} else {\n\t\t\tconst response = this.request.get('https://' + params['api_host'] + apiPath + apiParams);\n\t\t}\n\n\t\tthis.request.clearHeader();\n\n\t\tif (this.request.getStatus() === parseInt(params['http_status_code'])) {\n\t\t\treturn response;\n\t\t} else {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Unexpected HTTP response code: ' + this.request.getStatus());\n\t\t\tthrow 'Unexpected HTTP response code: ' + this.request.getStatus();\n\t\t}\n\t};\n\n\tthis.extractData = function (httpMethod, data, keys) {\n\t\ttry {\n\t\t\tdata = JSON.parse(data);\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the received JSON object: ' + data);\n\t\t\tthrow 'Could not parse received JSON object. See logs for more information.';\n\t\t}\n\n\t\tif (typeof keys == 'object') {\n\t\t\tvar returnBuffer = [];\n\t\t\tfor (var dataObj = 0, dataLength = data.length; dataObj < dataLength; dataObj++) {\n\n\t\t\t\tvar objectBuffer = {};\n\t\t\t\tfor (var key = 0, keysLength = keys.length; key < keysLength; key++) {\n\t\t\t\t\tif (data[dataObj][keys[key]] || data[dataObj][keys[key]] == null) {\n\t\t\t\t\t\tobjectBuffer[keys[key].match(/^[a-z]+$|[A-Z][a-z]+$/)[0].toLowerCase()] = data[dataObj][keys[key]];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Received an unexpected JSON object. Could not get value for key \"' + keys[key] + '\" in JSON: ' + JSON.stringify(data[dataObj]));\n\t\t\t\t\t\tthrow 'Received an unexpected JSON object. See logs for more information.';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturnBuffer.push(objectBuffer);\n\t\t\t}\n\t\t\treturn returnBuffer;\n\t\t}\n\n\t\ttry {\n\t\t\tif (httpMethod === 'get') {\n\t\t\t\treturn data[keys];\n\t\t\t} else {\n\t\t\t\tif (data.length === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tdata = data[0][keys];\n\t\t\t\treturn data[data.length - 1]['value'];\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not find key \"' + keys + '\" in JSON: ' + JSON.stringify(data));\n\t\t\tthrow 'Could not find required key in JSON object. See logs for more information.';\n\t\t}\n\t};\n}\n\n\nconst params = JSON.parse(value);\nvalidateZabbixParams(['tenancy_ocid', 'user_ocid', 'private_key', 'fingerprint', 'api_host', 'http_status_code'], params);\nvar oci = new OCI('Object storage', 'Get buckets', params);\nconst namespace = JSON.parse(oci.executeRequest('get', '/n', ''));\n\nreturn JSON.stringify(oci.extractData('get', oci.executeRequest('get', '/n/' + encodeURIComponent(namespace) + '/b/', '?compartmentId=' + encodeURIComponent(params['tenancy_ocid']) + '&fields=tags'), ['name', 'freeformTags']));",
                        "filter": {
                            "evaltype": "AND",
                            "conditions": [
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.OBJECT.STORAGE.DISCOVERY.NAME.MATCHES}",
                                    "formulaid": "A"
                                },
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.OBJECT.STORAGE.DISCOVERY.NAME.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "B"
                                }
                            ]
                        },
                        "description": "Discover object storage.",
                        "host_prototypes": [
                            {
                                "uuid": "f71e979727ce42daa80a34da5ffb296f",
                                "host": "OCI Bucket - {#NAME}",
                                "name": "OCI Bucket - {#NAME}",
                                "group_links": [
                                    {
                                        "group": {
                                            "name": "Applications"
                                        }
                                    }
                                ],
                                "templates": [
                                    {
                                        "name": "Oracle Cloud Object Storage by HTTP"
                                    }
                                ],
                                "macros": [
                                    {
                                        "macro": "{$OCI.OBJECT.STORAGE.BUCKET}",
                                        "value": "{#NAME}",
                                        "description": "Object storage bucket name."
                                    }
                                ],
                                "tags": [
                                    {
                                        "tag": "oci-obj-store-name",
                                        "value": "{#NAME}"
                                    }
                                ]
                            }
                        ],
                        "timeout": "10s",
                        "parameters": [
                            {
                                "name": "api_host",
                                "value": "{$OCI.API.OBJECT.STORAGE.HOST}"
                            },
                            {
                                "name": "fingerprint",
                                "value": "{$OCI.API.FINGERPRINT}"
                            },
                            {
                                "name": "http_proxy",
                                "value": "{$OCI.HTTP.PROXY}"
                            },
                            {
                                "name": "http_status_code",
                                "value": "{$OCI.HTTP.RETURN.CODE.OK}"
                            },
                            {
                                "name": "private_key",
                                "value": "{$OCI.API.PRIVATE.KEY}"
                            },
                            {
                                "name": "tenancy_ocid",
                                "value": "{$OCI.API.TENANCY}"
                            },
                            {
                                "name": "user_ocid",
                                "value": "{$OCI.API.USER}"
                            }
                        ],
                        "lld_macro_paths": [
                            {
                                "lld_macro": "{#NAME}",
                                "path": "$.name"
                            }
                        ]
                    },
                    {
                        "uuid": "378d760173924bf48fbc25c74a520a8b",
                        "name": "Virtual cloud networks discovery",
                        "type": "SCRIPT",
                        "key": "oci.vcn.discovery",
                        "delay": "1h",
                        "params": "function validateZabbixParams(requiredParams, allParams) {\n\trequiredParams.forEach(function (field) {\n\t\tif (typeof allParams !== 'object' || typeof allParams[field] === 'undefined' || allParams[field] === '') {\n\t\t\tthrow 'Required param is not set: ' + field + '.';\n\t\t}\n\t});\n}\n\nfunction OCI(service, action, params) {\n\tthis.zabbixLogPrefix = '[ OCI ] [ ' + service + ' ] [ ' + action + ' ]';\n\tthis.request = new HttpRequest();\n\n\tthis.hash = function (string) {\n\t\treturn sha256(string);\n\t};\n\n\tthis.sign = function (string) {\n\t\treturn sign('sha256', params['private_key'], string);\n\t};\n\n\tthis.encode = function (hash) {\n\t\tconst hexArr = hash.match(/.{1,2}/g);\n\t\tvar uInt8Array = new Uint8Array(hexArr.length);\n\t\thexArr.forEach(function (hex, idx) {\n\t\t\tuInt8Array[idx] = parseInt(hex, 16);\n\t\t});\n\t\treturn btoa(uInt8Array);\n\t};\n\n\tthis.getDate = function () {\n\t\tconst weekdayShortList = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\tconst monthShortList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n\t\tconst today = new Date();\n\t\treturn weekdayShortList[today.getUTCDay()] + ', ' + today.getUTCDate() + ' ' + monthShortList[today.getUTCMonth()] + ' ' + today.getUTCFullYear() + ' ' + today.getUTCHours() + ':' + today.getUTCMinutes() + ':' + today.getUTCSeconds() + ' GMT';\n\t};\n\n\tthis.executeRequest = function (httpMethod, apiPath, apiParams, mql, namespace) {\n\t\tvar headers = '(request-target) date host';\n\t\tconst contentTypeHeader = 'content-type: application/json';\n\t\tconst dateHeader = 'date: ' + this.getDate();\n\t\tconst hostHeader = 'host: ' + params['api_host'];\n\t\tconst requestTarget = '(request-target): ' + httpMethod + ' ' + apiPath + apiParams;\n\t\tvar signingString = requestTarget + '\\n' + dateHeader + '\\n' + hostHeader;\n\t\tvar reqHeaders = [contentTypeHeader, dateHeader];\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar body = JSON.stringify({\n\t\t\t\t'namespace': namespace,\n\t\t\t\t'query': mql\n\t\t\t});\n\t\t\theaders = headers + ' x-content-sha256 content-type content-length';\n\t\t\tconst bodyHeader = 'x-content-sha256: ' + this.encode(this.hash(body));\n\t\t\tconst bodyLengthHeader = 'content-length: ' + body.length;\n\t\t\tsigningString = signingString + '\\n' + bodyHeader + '\\n' + contentTypeHeader + '\\n' + bodyLengthHeader;\n\t\t\treqHeaders.push(bodyHeader, bodyLengthHeader);\n\t\t}\n\n\t\tconst signature = this.encode(this.sign(signingString));\n\n\t\treqHeaders.push('Authorization: Signature version=\"1\",keyId=\"' + params['tenancy_ocid'] + '/' + params['user_ocid'] + '/' + params['fingerprint'] + '\",algorithm=\"rsa-sha256\",headers=\"' + headers + '\",signature=\"' + signature + '\"');\n\t\tfor (var header = 0, headerLength = reqHeaders.length; header < headerLength; header++) {\n\t\t\tthis.request.addHeader(reqHeaders[header]);\n\t\t}\n\n\t\tif (params['http_proxy']) {\n\t\t\tthis.request.setProxy(params['http_proxy']);\n\t\t\tZabbix.log(4, this.zabbixLogPrefix + ' Using http proxy: ' + params['http_proxy']);\n\t\t}\n\n\t\tif (httpMethod === 'post') {\n\t\t\tvar apiRateLimitExceeded = false;\n\t\t\tdo {\n\t\t\t\tconst response = this.request.post('https://' + params['api_host'] + apiPath + apiParams, body);\n\n\t\t\t\ttry {\n\t\t\t\t\tif (JSON.parse(response)['code'] === 'TooManyRequests') {\n\n\t\t\t\t\t\tapiRateLimitExceeded = true;\n\t\t\t\t\t\tZabbix.sleep(1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tapiRateLimitExceeded = false;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the response: ' + JSON.stringify(response));\n\t\t\t\t\tthrow 'Could not parse the response. See logs for more information.';\n\t\t\t\t}\n\t\t\t} while (apiRateLimitExceeded);\n\t\t} else {\n\t\t\tconst response = this.request.get('https://' + params['api_host'] + apiPath + apiParams);\n\t\t}\n\n\t\tthis.request.clearHeader();\n\n\t\tif (this.request.getStatus() === parseInt(params['http_status_code'])) {\n\t\t\treturn response;\n\t\t} else {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Unexpected HTTP response code: ' + this.request.getStatus());\n\t\t\tthrow 'Unexpected HTTP response code: ' + this.request.getStatus();\n\t\t}\n\t};\n\n\tthis.extractData = function (httpMethod, data, keys) {\n\t\ttry {\n\t\t\tdata = JSON.parse(data);\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not parse the received JSON object: ' + data);\n\t\t\tthrow 'Could not parse received JSON object. See logs for more information.';\n\t\t}\n\n\t\tif (typeof keys == 'object') {\n\t\t\tvar returnBuffer = [];\n\t\t\tfor (var dataObj = 0, dataLength = data.length; dataObj < dataLength; dataObj++) {\n\n\t\t\t\tvar objectBuffer = {};\n\t\t\t\tfor (var key = 0, keysLength = keys.length; key < keysLength; key++) {\n\t\t\t\t\tif (data[dataObj][keys[key]] || data[dataObj][keys[key]] == null) {\n\t\t\t\t\t\tobjectBuffer[keys[key].match(/^[a-z]+$|[A-Z][a-z]+$/)[0].toLowerCase()] = data[dataObj][keys[key]];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Received an unexpected JSON object. Could not get value for key \"' + keys[key] + '\" in JSON: ' + JSON.stringify(data[dataObj]));\n\t\t\t\t\t\tthrow 'Received an unexpected JSON object. See logs for more information.';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturnBuffer.push(objectBuffer);\n\t\t\t}\n\t\t\treturn returnBuffer;\n\t\t}\n\n\t\ttry {\n\t\t\tif (httpMethod === 'get') {\n\t\t\t\treturn data[keys];\n\t\t\t} else {\n\t\t\t\tif (data.length === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tdata = data[0][keys];\n\t\t\t\treturn data[data.length - 1]['value'];\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tZabbix.log(3, this.zabbixLogPrefix + ' Could not find key \"' + keys + '\" in JSON: ' + JSON.stringify(data));\n\t\t\tthrow 'Could not find required key in JSON object. See logs for more information.';\n\t\t}\n\t};\n}\n\n\nconst params = JSON.parse(value);\nvalidateZabbixParams(['tenancy_ocid', 'user_ocid', 'private_key', 'fingerprint', 'api_host', 'http_status_code'], params);\nvar oci = new OCI('VCN', 'Get VCNs', params);\n\nreturn JSON.stringify(oci.extractData('get', oci.executeRequest('get', '/20160918/vcns', '?compartmentId=' + encodeURIComponent(params['tenancy_ocid'])), ['id', 'displayName', 'lifecycleState', 'freeformTags']));",
                        "filter": {
                            "evaltype": "AND",
                            "conditions": [
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.VCN.DISCOVERY.NAME.MATCHES}",
                                    "formulaid": "A"
                                },
                                {
                                    "macro": "{#NAME}",
                                    "value": "{$OCI.VCN.DISCOVERY.NAME.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "B"
                                },
                                {
                                    "macro": "{#STATE}",
                                    "value": "{$OCI.VCN.DISCOVERY.STATE.MATCHES}",
                                    "formulaid": "C"
                                },
                                {
                                    "macro": "{#STATE}",
                                    "value": "{$OCI.VCN.DISCOVERY.STATE.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "D"
                                }
                            ]
                        },
                        "description": "Discover virtual cloud networks (VCNs).",
                        "host_prototypes": [
                            {
                                "uuid": "5329fee3dbc643ebbb99472c67a0a207",
                                "host": "OCI VCN - {#ID}",
                                "name": "OCI VCN - {#ID}",
                                "group_links": [
                                    {
                                        "group": {
                                            "name": "Applications"
                                        }
                                    }
                                ],
                                "templates": [
                                    {
                                        "name": "Oracle Cloud Networking by HTTP"
                                    }
                                ],
                                "macros": [
                                    {
                                        "macro": "{$OCI.VCN.ID}",
                                        "value": "{#ID}",
                                        "description": "ID of the OCI VCN (virtual cloud network)."
                                    }
                                ],
                                "tags": [
                                    {
                                        "tag": "oci-vcn-name",
                                        "value": "{#NAME}"
                                    }
                                ]
                            }
                        ],
                        "timeout": "10s",
                        "parameters": [
                            {
                                "name": "api_host",
                                "value": "{$OCI.API.CORE.HOST}"
                            },
                            {
                                "name": "fingerprint",
                                "value": "{$OCI.API.FINGERPRINT}"
                            },
                            {
                                "name": "http_proxy",
                                "value": "{$OCI.HTTP.PROXY}"
                            },
                            {
                                "name": "http_status_code",
                                "value": "{$OCI.HTTP.RETURN.CODE.OK}"
                            },
                            {
                                "name": "private_key",
                                "value": "{$OCI.API.PRIVATE.KEY}"
                            },
                            {
                                "name": "tenancy_ocid",
                                "value": "{$OCI.API.TENANCY}"
                            },
                            {
                                "name": "user_ocid",
                                "value": "{$OCI.API.USER}"
                            }
                        ],
                        "lld_macro_paths": [
                            {
                                "lld_macro": "{#ID}",
                                "path": "$.id"
                            },
                            {
                                "lld_macro": "{#NAME}",
                                "path": "$.name"
                            },
                            {
                                "lld_macro": "{#STATE}",
                                "path": "$.state"
                            }
                        ]
                    }
                ],
                "tags": [
                    {
                        "tag": "class",
                        "value": "cloud"
                    },
                    {
                        "tag": "target",
                        "value": "oci"
                    },
                    {
                        "tag": "target",
                        "value": "oracle-cloud-infrastructure"
                    }
                ],
                "macros": [
                    {
                        "macro": "{$OCI.API.AUTONOMOUS.DB.HOST}",
                        "description": "Host for OCI Autonomous Database API endpoint."
                    },
                    {
                        "macro": "{$OCI.API.CORE.HOST}",
                        "description": "Host for OCI Core Services API endpoint."
                    },
                    {
                        "macro": "{$OCI.API.FINGERPRINT}",
                        "type": "SECRET_TEXT",
                        "description": "Fingerprint of private key."
                    },
                    {
                        "macro": "{$OCI.API.OBJECT.STORAGE.HOST}",
                        "description": "Host for OCI Object Storage API endpoint."
                    },
                    {
                        "macro": "{$OCI.API.PRIVATE.KEY}",
                        "type": "SECRET_TEXT",
                        "description": "Entire private key for API access."
                    },
                    {
                        "macro": "{$OCI.API.TELEMETRY.HOST}",
                        "description": "Host for OCI Monitoring API endpoint."
                    },
                    {
                        "macro": "{$OCI.API.TENANCY}",
                        "description": "OCID of tenancy."
                    },
                    {
                        "macro": "{$OCI.API.USER}",
                        "description": "OCID of user."
                    },
                    {
                        "macro": "{$OCI.AUTONOMOUS.DB.DISCOVERY.NAME.MATCHES}",
                        "value": ".*",
                        "description": "Sets the regex string of autonomous database names to allow in discovery."
                    },
                    {
                        "macro": "{$OCI.AUTONOMOUS.DB.DISCOVERY.NAME.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Sets the regex string of autonomous database names to ignore in discovery."
                    },
                    {
                        "macro": "{$OCI.AUTONOMOUS.DB.DISCOVERY.STATE.MATCHES}",
                        "value": ".*",
                        "description": "Sets the regex string of autonomous database states to allow in discovery."
                    },
                    {
                        "macro": "{$OCI.AUTONOMOUS.DB.DISCOVERY.STATE.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Sets the regex string of autonomous database states to ignore in discovery."
                    },
                    {
                        "macro": "{$OCI.COMPUTE.DISCOVERY.NAME.MATCHES}",
                        "value": ".*",
                        "description": "Sets the regex string of compute instance names to allow in discovery."
                    },
                    {
                        "macro": "{$OCI.COMPUTE.DISCOVERY.NAME.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Sets the regex string of compute instance names to ignore in discovery."
                    },
                    {
                        "macro": "{$OCI.COMPUTE.DISCOVERY.STATE.MATCHES}",
                        "value": ".*",
                        "description": "Sets the regex string of compute instance states to allow in discovery."
                    },
                    {
                        "macro": "{$OCI.COMPUTE.DISCOVERY.STATE.NOT_MATCHES}",
                        "value": "TERMINATED",
                        "description": "Sets the regex string of compute instance states to ignore in discovery."
                    },
                    {
                        "macro": "{$OCI.HTTP.PROXY}",
                        "description": "Set an HTTP proxy for OCI API requests if needed."
                    },
                    {
                        "macro": "{$OCI.HTTP.RETURN.CODE.OK}",
                        "value": "200",
                        "description": "Set the HTTP return code that represents an OK response from the API. The default is \"200\",  but can vary, for example, if a proxy is used."
                    },
                    {
                        "macro": "{$OCI.OBJECT.STORAGE.DISCOVERY.NAME.MATCHES}",
                        "value": ".*",
                        "description": "Set an HTTP proxy for OCI API requests if needed."
                    },
                    {
                        "macro": "{$OCI.OBJECT.STORAGE.DISCOVERY.NAME.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Set an HTTP proxy for OCI API requests if needed."
                    },
                    {
                        "macro": "{$OCI.VCN.DISCOVERY.NAME.MATCHES}",
                        "value": ".*",
                        "description": "Sets the regex string of virtual cloud network names to allow in discovery."
                    },
                    {
                        "macro": "{$OCI.VCN.DISCOVERY.NAME.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Sets the regex string of virtual cloud network names to ignore in discovery."
                    },
                    {
                        "macro": "{$OCI.VCN.DISCOVERY.STATE.MATCHES}",
                        "value": ".*",
                        "description": "Sets the regex string of virtual cloud network states to allow in discovery."
                    },
                    {
                        "macro": "{$OCI.VCN.DISCOVERY.STATE.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Sets the regex string of virtual cloud network states to ignore in discovery."
                    },
                    {
                        "macro": "{$OCI.VOLUME.BLOCK.DISCOVERY.NAME.MATCHES}",
                        "value": ".*",
                        "description": "Sets the regex string of block volume names to allow in discovery."
                    },
                    {
                        "macro": "{$OCI.VOLUME.BLOCK.DISCOVERY.NAME.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Sets the regex string of block volume names to ignore in discovery."
                    },
                    {
                        "macro": "{$OCI.VOLUME.BLOCK.DISCOVERY.STATE.MATCHES}",
                        "value": ".*",
                        "description": "Sets the regex string of block volume states to allow in discovery."
                    },
                    {
                        "macro": "{$OCI.VOLUME.BLOCK.DISCOVERY.STATE.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Sets the regex string of block volume states to ignore in discovery."
                    },
                    {
                        "macro": "{$OCI.VOLUME.BOOT.DISCOVERY.NAME.MATCHES}",
                        "value": ".*",
                        "description": "Sets the regex string of boot volume names to allow in discovery."
                    },
                    {
                        "macro": "{$OCI.VOLUME.BOOT.DISCOVERY.NAME.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Sets the regex string of boot volume names to ignore in discovery."
                    },
                    {
                        "macro": "{$OCI.VOLUME.BOOT.DISCOVERY.STATE.MATCHES}",
                        "value": ".*",
                        "description": "Sets the regex string of boot volume states to allow in discovery."
                    },
                    {
                        "macro": "{$OCI.VOLUME.BOOT.DISCOVERY.STATE.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Sets the regex string of boot volume states to ignore in discovery."
                    }
                ]
            }
        ]
    }
}