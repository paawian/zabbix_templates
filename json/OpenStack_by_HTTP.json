{
    "zabbix_export": {
        "version": "7.0",
        "template_groups": [
            {
                "uuid": "c2c162144c2d4c5491c8801193af4945",
                "name": "Templates/Cloud"
            }
        ],
        "host_groups": [
            {
                "uuid": "137f19e6e2dc4219b33553b812627bc2",
                "name": "Virtual machines"
            }
        ],
        "templates": [
            {
                "uuid": "4e3fb27f028e4c35b8c9fc43b11c07d7",
                "template": "OpenStack by HTTP",
                "name": "OpenStack by HTTP",
                "description": "Requests OpenStack API access token and discovers available OpenStack services using OpenStack Identity API by HTTP using script item and creates host prototypes for them.\n\nTemplate uses OpenStack application credentials for authorization.\n\nZabbix currently supports OpenStack Nova service.\n\nRead the template documentation prior to using this template.\n\nYou can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback\n\nGenerated by official Zabbix template tool \"Templator\"",
                "vendor": {
                    "name": "Zabbix",
                    "version": "7.0-0"
                },
                "groups": [
                    {
                        "name": "Templates/Cloud"
                    }
                ],
                "items": [
                    {
                        "uuid": "0518d08edbf2480abf15f4ef0e7a251a",
                        "name": "Get access token and service catalog",
                        "type": "SCRIPT",
                        "key": "openstack.identity.auth",
                        "delay": "{$OPENSTACK.AUTH.INTERVAL}",
                        "history": "0",
                        "value_type": "TEXT",
                        "trends": "0",
                        "params": "\nconst request_path = '/v3/auth/tokens';\n\nfunction checkParams(params) {\n\t['api_url', 'app_cred_id', 'app_cred_secret'].forEach(function (field) {\n\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\tthrow 'Required param is not set: ' + field + '.';\n\t\t}\n\t});\n\treturn params;\n}\n\nfunction getHttpData(url, params, app_cred_id, app_cred_secret) {\n\tconst request = new HttpRequest();\n\n\trequest.addHeader('Content-Type: application/json');\n\n\tconst request_body = {\n\t\t\"auth\": {\n\t\t\t\"identity\": {\n\t\t\t\t\"methods\": [\n\t\t\t\t\t\"application_credential\"\n\t\t\t\t],\n\t\t\t\t\"application_credential\": {\n\t\t\t\t\t\"id\": app_cred_id,\n\t\t\t\t\t\"secret\": app_cred_secret\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tif (params['http_proxy']) {\n\t\trequest.setProxy(params['http_proxy'])\n\t\tZabbix.log(4, '[ Openstack Nova API ] Using http proxy: ' + params['http_proxy']);\n\t}\n\n\tconst response = request.post(url, JSON.stringify(request_body));\n\tZabbix.log(4, '[ Openstack Identity API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);\n\n\tif (request.getStatus() !== 201) {\n\t\tif (typeof (response.error && response.error.message) !== 'undefined') {\n\t\t\tthrow response.error.message;\n\t\t} else {\n\t\t\tthrow 'Failed to receive data: invalid response status code. Check debug log for more information.';\n\t\t}\n\t}\n\n\treturn {'request': request, 'response': response};\n}\n\nfunction parseHttpData(http_data) {\n\tvar token;\n\tconst headers = http_data['request'].getHeaders(true);\n\tif (typeof headers === \"object\") {\n\t\tif (headers !== null) {\n\t\t\ttry {\n\t\t\t\ttoken = headers[\"X-Subject-Token\"][0];\n\t\t\t} catch (error) {\n\t\t\t\tthrow 'Failed to parse response received from OpenStack Identity API. Check debug log for more information.';\n\t\t\t}\n\t\t} else {\n\t\t\tthrow 'Response object is empty. Check debug log for more information.';\n\t\t}\n\t} else {\n\t\tthrow 'Cannot process response data: received data is not an object. Check debug log for more information.';\n\t}\n\n\tconst supported_services = ['nova'];\n\n\tvar ret = [];\n\tconst data = JSON.parse(http_data['response']);\n\tif (data['token']['catalog']) {\n\t\tconst service_catalog = data['token']['catalog'];\n\t} else {\n\t\tthrow 'Cannot find service catalog in HTTP response.'\n\t}\n\n\tservice_catalog.forEach(function (service) {\n\t\tif (supported_services.indexOf(service.name) > -1) {\n\t\t\tservice.endpoints.forEach(function (endpoint) {\n\t\t\t\tif (endpoint.interface === 'public') {\n\t\t\t\t\tret.push({\n\t\t\t\t\t\t'service_name': service.name[0].toUpperCase() + service.name.slice(1),\n\t\t\t\t\t\t'service_url': endpoint.url,\n\t\t\t\t\t\t'token': token\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t});\n\n\treturn JSON.stringify(ret);\n}\n\nconst params = checkParams(JSON.parse(value)),\n\turl = params.api_url,\n\tauth_cred_id = params.app_cred_id,\n\tauth_cred_secret = params.app_cred_secret;\n\nconst httpData = getHttpData(url + request_path, params, auth_cred_id, auth_cred_secret);\nreturn parseHttpData(httpData);",
                        "description": "Authorizes user on the OpenStack Identity service and gets the service catalog.",
                        "timeout": "10s",
                        "parameters": [
                            {
                                "name": "api_url",
                                "value": "{$OPENSTACK.KEYSTONE.API.ENDPOINT}"
                            },
                            {
                                "name": "app_cred_id",
                                "value": "{$OPENSTACK.APP.CRED.ID}"
                            },
                            {
                                "name": "app_cred_secret",
                                "value": "{$OPENSTACK.APP.CRED.SECRET}"
                            },
                            {
                                "name": "http_proxy",
                                "value": "{$OPENSTACK.HTTP.PROXY}"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "component",
                                "value": "raw"
                            }
                        ]
                    }
                ],
                "discovery_rules": [
                    {
                        "uuid": "f827e364d7bd4013b02504a58fdc2d39",
                        "name": "OpenStack: Nova discovery",
                        "type": "DEPENDENT",
                        "key": "openstack.services.nova.discovery",
                        "delay": "0",
                        "filter": {
                            "conditions": [
                                {
                                    "macro": "{#SERVICE_NAME}",
                                    "value": "^Nova$",
                                    "formulaid": "A"
                                }
                            ]
                        },
                        "description": "Discovers OpenStack services from the monitoring user's services catalog.",
                        "host_prototypes": [
                            {
                                "uuid": "580d769292ec48379c5b84cd5c72533b",
                                "host": "OpenStack {#SERVICE_NAME}",
                                "name": "OpenStack {#SERVICE_NAME}",
                                "group_links": [
                                    {
                                        "group": {
                                            "name": "Virtual machines"
                                        }
                                    }
                                ],
                                "templates": [
                                    {
                                        "name": "OpenStack Nova by HTTP"
                                    }
                                ],
                                "macros": [
                                    {
                                        "macro": "{$OPENSTACK.NOVA.SERVICE.URL}",
                                        "value": "{#SERVICE_URL}",
                                        "description": "OpenStack Nova service path."
                                    },
                                    {
                                        "macro": "{$OPENSTACK.TOKEN}",
                                        "value": "{#TOKEN}",
                                        "description": "OpenStack authorization token."
                                    }
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "openstack.identity.auth"
                        },
                        "lld_macro_paths": [
                            {
                                "lld_macro": "{#SERVICE_NAME}",
                                "path": "$.service_name"
                            },
                            {
                                "lld_macro": "{#SERVICE_URL}",
                                "path": "$.service_url"
                            },
                            {
                                "lld_macro": "{#TOKEN}",
                                "path": "$.token"
                            }
                        ]
                    }
                ],
                "tags": [
                    {
                        "tag": "class",
                        "value": "cloud"
                    },
                    {
                        "tag": "target",
                        "value": "openstack"
                    }
                ],
                "macros": [
                    {
                        "macro": "{$OPENSTACK.APP.CRED.ID}",
                        "description": "Application credential ID for monitoring user access."
                    },
                    {
                        "macro": "{$OPENSTACK.APP.CRED.SECRET}",
                        "type": "SECRET_TEXT",
                        "description": "Application credential password for monitoring user access."
                    },
                    {
                        "macro": "{$OPENSTACK.AUTH.INTERVAL}",
                        "value": "50m",
                        "description": "API token regeneration interval, in minutes. By default, OpenStack API tokens expire after 60m."
                    },
                    {
                        "macro": "{$OPENSTACK.HTTP.PROXY}",
                        "description": "Sets the HTTP proxy for the authorization item. Host prototypes will also use this value for HTTP proxy. If this parameter is empty, then no proxy is used."
                    },
                    {
                        "macro": "{$OPENSTACK.KEYSTONE.API.ENDPOINT}",
                        "description": "API endpoint for Identity Service, e.g., https://local.openstack:5000."
                    }
                ]
            }
        ]
    }
}