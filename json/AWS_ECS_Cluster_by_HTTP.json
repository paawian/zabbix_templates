{
    "zabbix_export": {
        "version": "7.0",
        "template_groups": [
            {
                "uuid": "c2c162144c2d4c5491c8801193af4945",
                "name": "Templates/Cloud"
            }
        ],
        "templates": [
            {
                "uuid": "c94105c23220452baed03ba87f09ca12",
                "template": "AWS ECS Cluster by HTTP",
                "name": "AWS ECS Cluster by HTTP",
                "description": "The template gets AWS ECS Cluster metrics and uses the script item to make HTTP requests to the CloudWatch API.\nDon't forget to read the README.md for the correct setup of the template.\n\nYou can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback\n\nGenerated by official Zabbix template tool \"Templator\"",
                "vendor": {
                    "name": "Zabbix",
                    "version": "7.0-0"
                },
                "groups": [
                    {
                        "name": "Templates/Cloud"
                    }
                ],
                "items": [
                    {
                        "uuid": "9c4a894d46174d679c58c9a1339dec2f",
                        "name": "Get alarms check",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.alarms.check",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "CHAR",
                        "trends": "0",
                        "description": "Data collection check.",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.error"
                                ],
                                "error_handler": "CUSTOM_VALUE"
                            },
                            {
                                "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                "parameters": [
                                    "3h"
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_alarms"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "status"
                            }
                        ],
                        "triggers": [
                            {
                                "uuid": "f8ff542b35a345e490910323d5dee19c",
                                "expression": "length(last(/AWS ECS Cluster by HTTP/aws.ecs.alarms.check))>0",
                                "name": "Failed to get alarms data",
                                "opdata": "{ITEM.LASTVALUE1}",
                                "priority": "WARNING",
                                "tags": [
                                    {
                                        "tag": "scope",
                                        "value": "availability"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "c9d2dff2619d41c1a0d1a528fecab461",
                        "name": "Container Instance Count",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.container_instance_count",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "FLOAT",
                        "description": "'The number of EC2 instances running the Amazon ECS agent that are registered with a cluster.'",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.MetricData[?(@.Label == \"ContainerInstanceCount\")].Values.first().first()"
                                ],
                                "error_handler": "DISCARD_VALUE"
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "system"
                            }
                        ]
                    },
                    {
                        "uuid": "161886f00f91479597db4bfaae27db46",
                        "name": "CPU Reserved",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.cpu_reserved",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "FLOAT",
                        "description": "'A number of CPU units reserved by tasks in the resource that is specified by the dimension set that you're using.\n This metric is only collected for tasks that have a defined CPU reservation in their task definition.'",
                        "valuemap": {
                            "name": "CPU Reserved"
                        },
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.[?(@.Label == \"CpuReserved\")].Values.first().first()"
                                ],
                                "error_handler": "DISCARD_VALUE"
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "cpu"
                            }
                        ]
                    },
                    {
                        "uuid": "fc4c44d533304ac3a4f59773c7424324",
                        "name": "CPU Utilization",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.cpu_utilization",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "FLOAT",
                        "units": "%",
                        "description": "Cluster CPU utilization",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.CPUUtilization"
                                ],
                                "error_handler": "DISCARD_VALUE"
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "cpu"
                            }
                        ],
                        "triggers": [
                            {
                                "uuid": "5395c1d6d27c495a8972d2ea8ca8b02a",
                                "expression": "min(/AWS ECS Cluster by HTTP/aws.ecs.cpu_utilization,15m)>{$AWS.ECS.CLUSTER.CPU.UTIL.WARN}",
                                "name": "High CPU utilization",
                                "event_name": "High CPU utilization (over {$AWS.ECS.CLUSTER.CPU.UTIL.WARN}% for 15m)",
                                "opdata": "Current utilization: {ITEM.LASTVALUE1}",
                                "priority": "WARNING",
                                "description": "The CPU utilization is too high. The system might be slow to respond.",
                                "tags": [
                                    {
                                        "tag": "scope",
                                        "value": "capacity"
                                    },
                                    {
                                        "tag": "scope",
                                        "value": "performance"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "9aefed8b23ee41a7941e41f33fc95ebe",
                        "name": "Get alarms data",
                        "type": "SCRIPT",
                        "key": "aws.ecs.get_alarms",
                        "delay": "0s;m/1",
                        "history": "0",
                        "value_type": "TEXT",
                        "trends": "0",
                        "params": "var AWS = {\n\tparams: {},\n\tmetadata: 'http://169.254.169.254/latest/meta-data/iam/security-credentials',\n\n\tgetField: function (data, path) {\n\t\tvar steps = path.split('.');\n\t\tfor (var i = 0; i < steps.length; i++) {\n\t\t\tvar step = steps[i];\n\t\t\tif (typeof data !== 'object' || typeof data[step] === 'undefined') {\n\t\t\t\tthrow 'Required field was not found: ' + path;\n\t\t\t}\n\n\t\t\tdata = data[step];\n\t\t}\n\n\t\treturn data;\n\t},\n\n\tsetParams: function (params) {\n\t\tAWS.params['proxy'] = params.proxy;\n\t\tswitch (AWS.getField(params, 'auth_type')) {\n\t\t\tcase 'role_base':\n\t\t\t\tAWS.params['auth_type'] = 'role_base';\n\t\t\t\tvar request = new HttpRequest();\n\t\t\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t\t\t}\n\t\t\t\tvar IamRoleName = request.get(AWS.metadata);\n\n\t\t\t\tif (request.getStatus() !== 200 || IamRoleName === null || IamRoleName === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata. Role not found.';\n\t\t\t\t}\n\n\t\t\t\tcredentials = request.get(AWS.metadata + '/' + encodeURI(IamRoleName));\n\n\t\t\t\tif (request.getStatus() !== 200 || credentials === null || credentials === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata.';\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = JSON.parse(credentials);\n\t\t\t\t}\n\t\t\t\tcatch (error) {\n\t\t\t\t\tthrow 'Failed to parse response received from instance metadata. Check debug log for more information.';\n\t\t\t\t}\n\n\t\t\t\t['AccessKeyId', 'SecretAccessKey', 'Token'].forEach(function (field) {\n\t\t\t\t\tif (typeof credentials !== 'object' || typeof credentials[field] === 'undefined' || credentials[field] === '') {\n\t\t\t\t\t\tthrow 'Required credentials is not set: \"' + field + '\".';\n\t\t\t\t\t};\n\t\t\t\t\tAWS.params[field] = credentials[field];\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'access_key':\n\t\t\tdefault:\n\t\t\t\tAWS.params['auth_type'] = 'access_key';\n\t\t\t\t['AccessKeyId', 'SecretAccessKey'].forEach(function (field) {\n\t\t\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t\t\t}\n\t\t\t\t\tAWS.params[field] = params[field];\n\t\t\t\t});\n\t\t}\n\t\t['region', 'cluster_name'].forEach(function (field) {\n\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t}\n\t\t\tAWS.params[field] = params[field];\n\t\t});\n\t},\n\n\tsign: function (key, message) {\n\t\tvar hex = hmac('sha256', key, message);\n\n\t\tif ((hex.length % 2) === 1) {\n\t\t\tthrow 'Invalid length of a hex string!';\n\t\t}\n\n\t\tvar result = new Int8Array(hex.length / 2);\n\t\tfor (var i = 0, b = 0; i < hex.length; i += 2, b++) {\n\t\t\tresult[b] = parseInt(hex.substring(i, i + 2), 16);\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tprepareParams: function (params) {\n\t\tvar result = [];\n\n\t\tObject.keys(params).sort().forEach(function (key) {\n\t\t\tif (typeof params[key] !== 'object') {\n\t\t\t\tresult.push(key + '=' + encodeURIComponent(params[key]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push(prepareObject(key, params[key]));\n\t\t\t}\n\t\t});\n\n\t\treturn result.join('&');\n\t},\n\n\trequest: function (method, region, service, params, data) {\n\t\tif (typeof data === 'undefined' || data === null) {\n\t\t\tdata = '';\n\t\t}\n\n\t\tvar amzdate = (new Date()).toISOString().replace(/\\.\\d+Z/, 'Z').replace(/[-:]/g, ''),\n\t\t\tdate = amzdate.replace(/T\\d+Z/, ''),\n\t\t\thost = service + '.' + region + '.amazonaws.com',\n\t\t\tcanonical_uri = '/',\n\t\t\tcanonical_headers = 'content-encoding:amz-1.0\\n' + 'host:' + host + '\\n' + 'x-amz-date:' + amzdate + '\\n',\n\t\t\tsigned_headers = 'content-encoding;host;x-amz-date',\n\t\t\tcanonical_request = method + '\\n' + canonical_uri + '\\n' + params + '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + sha256(data),\n\t\t\tcredential_scope = date + '/' + region + '/' + service + '/' + 'aws4_request',\n\t\t\trequest_string = 'AWS4-HMAC-SHA256' + '\\n' + amzdate + '\\n' + credential_scope + '\\n' + sha256(canonical_request),\n\t\t\tkey = AWS.sign('AWS4' + AWS.params.SecretAccessKey, date);\n\n\t\tkey = AWS.sign(key, region);\n\t\tkey = AWS.sign(key, service);\n\t\tkey = AWS.sign(key, 'aws4_request');\n\n\t\tvar request = new HttpRequest(),\n\t\t\turl = 'https://' + host + canonical_uri + '?' + params;\n\n\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t}\n\t\trequest.addHeader('x-amz-date: ' + amzdate);\n\t\trequest.addHeader('Accept: application/json');\n\t\trequest.addHeader('Content-Type: application/json');\n\t\trequest.addHeader('Content-Encoding: amz-1.0');\n\t\trequest.addHeader('Authorization: ' + 'AWS4-HMAC-SHA256 Credential=' + AWS.params.AccessKeyId + '/' + credential_scope + ', ' + 'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + hmac('sha256', key, request_string));\n\t\tif (AWS.params.auth_type === 'role_base')\n\t\t\trequest.addHeader('X-Amz-Security-Token: ' + AWS.params.Token);\n\n\t\tZabbix.log(4, '[ AWS ECS ] Sending request: ' + url);\n\n\t\tresponse = request.get(url);\n\n\t\tZabbix.log(4, '[ AWS ECS ] Received response with status code ' + request.getStatus() + ': ' + response);\n\n\t\tif (request.getStatus() !== 200) {\n\t\t\tthrow 'Request failed with status code ' + request.getStatus() + ': ' + response;\n\t\t}\n\n\t\tif (response[0] === '<') {\n\t\t\ttry {\n\t\t\t\tresponse = XML.toJson(response);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tthrow 'Failed to parse response received from AWS CloudWatch API. Check debug log for more information.';\n\t\t\t}\n\t\t}\n\n\t\tif (response !== null) {\n\t\t\ttry {\n\t\t\t\tresponse = JSON.parse(response);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tthrow 'Failed to parse response received from AWS CloudWatch API. Check debug log for more information.';\n\t\t\t}\n\t\t}\n\n\t\treturn response;\n\t},\n\n\tgetAlarms: function () {\n\t\tvar payload = {\n\t\t\t'Action': 'DescribeAlarms',\n\t\t\t'Version': '2010-08-01',\n\t\t\t'MaxRecords': 100\n\t\t},\n\t\t\tresult = [];\n\n\t\twhile (payload.NextToken !== '') {\n\t\t\tvar alarms = AWS.getField(AWS.request('GET', AWS.params.region, 'monitoring', AWS.prepareParams(payload)), 'DescribeAlarmsResponse.DescribeAlarmsResult');\n\t\t\tpayload.NextToken = alarms.NextToken || '';\n\t\t\talarms_list = AWS.getField(alarms, 'MetricAlarms');\n\n\t\t\tif (!Array.isArray(alarms_list))\n\t\t\t\talarms_list = [alarms_list]\n\t\t\talarms_list.forEach(function (alarm) {\n\t\t\t\tvar dimensions = alarm.Dimensions;\n\n\t\t\t\tZabbix.log(4, '[ AWS ECS ] dimensions: ' + JSON.stringify(dimensions));\n\t\t\t\tif (Array.isArray(alarm.Metrics)) {\n\t\t\t\t\talarm.Metrics.forEach(function (metric) {\n\t\t\t\t\t\tif (typeof metric.MetricStat === 'object' && metric.MetricStat !== null\n\t\t\t\t\t\t\t&& typeof metric.MetricStat.Metric === 'object' && metric.MetricStat.Metric !== null\n\t\t\t\t\t\t\t&& Array.isArray(metric.MetricStat.Metric.Dimensions)) {\n\t\t\t\t\t\t\tdimensions = dimensions.concat(metric.MetricStat.Metric.Dimensions);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tfor (var i in dimensions) {\n\t\t\t\t\tif (dimensions[i].Name === 'ClusterName' && dimensions[i].Value === AWS.params.cluster_name) {\n\t\t\t\t\t\tresult.push(alarm);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\ntry {\n\tAWS.setParams(JSON.parse(value));\n\n\treturn JSON.stringify(AWS.getAlarms());\n}\ncatch (error) {\n\terror += (String(error).endsWith('.')) ? '' : '.';\n\tZabbix.log(3, '[ AWS ECS ] ERROR: ' + error);\n\n\treturn JSON.stringify({ 'error': error });\n}",
                        "description": "Get alarms data.\nDescribeAlarms API method: https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html",
                        "preprocessing": [
                            {
                                "type": "CHECK_NOT_SUPPORTED",
                                "parameters": [
                                    "-1"
                                ]
                            }
                        ],
                        "timeout": "15s",
                        "parameters": [
                            {
                                "name": "AccessKeyId",
                                "value": "{$AWS.ACCESS.KEY.ID}"
                            },
                            {
                                "name": "auth_type",
                                "value": "{$AWS.AUTH_TYPE}"
                            },
                            {
                                "name": "cluster_name",
                                "value": "{$AWS.ECS.CLUSTER.NAME}"
                            },
                            {
                                "name": "proxy",
                                "value": "{$AWS.PROXY}"
                            },
                            {
                                "name": "region",
                                "value": "{$AWS.REGION}"
                            },
                            {
                                "name": "SecretAccessKey",
                                "value": "{$AWS.SECRET.ACCESS.KEY}"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "component",
                                "value": "raw"
                            }
                        ]
                    },
                    {
                        "uuid": "fa8f1dc24615438e98cbad686d40eaf7",
                        "name": "Get cluster services",
                        "type": "SCRIPT",
                        "key": "aws.ecs.get_cluster_services",
                        "delay": "5m",
                        "history": "0",
                        "value_type": "TEXT",
                        "trends": "0",
                        "params": "var AWS = {\n\tparams: {},\n\tmetadata: 'http://169.254.169.254/latest/meta-data/iam/security-credentials',\n\n\tsetParams: function (params) {\n\t\tAWS.params['proxy'] = params.proxy;\n\t\tswitch (AWS.getField(params, 'auth_type')) {\n\t\t\tcase 'role_base':\n\t\t\t\tAWS.params['auth_type'] = 'role_base';\n\t\t\t\tvar request = new HttpRequest();\n\t\t\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t\t\t}\n\t\t\t\tvar IamRoleName = request.get(AWS.metadata);\n\n\t\t\t\tif (request.getStatus() !== 200 || IamRoleName === null || IamRoleName === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata. Role not found.';\n\t\t\t\t}\n\n\t\t\t\tcredentials = request.get(AWS.metadata + '/' + encodeURI(IamRoleName));\n\n\t\t\t\tif (request.getStatus() !== 200 || credentials === null || credentials === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata.';\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = JSON.parse(credentials);\n\t\t\t\t}\n\t\t\t\tcatch (error) {\n\t\t\t\t\tthrow 'Failed to parse response received from instance metadata. Check debug log for more information.';\n\t\t\t\t}\n\n\t\t\t\t['AccessKeyId', 'SecretAccessKey', 'Token'].forEach(function (field) {\n\t\t\t\t\tif (typeof credentials !== 'object' || typeof credentials[field] === 'undefined' || credentials[field] === '') {\n\t\t\t\t\t\tthrow 'Required credentials is not set: \"' + field + '\".';\n\t\t\t\t\t};\n\t\t\t\t\tAWS.params[field] = credentials[field];\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'access_key':\n\t\t\tdefault:\n\t\t\t\tAWS.params['auth_type'] = 'access_key';\n\t\t\t\t['AccessKeyId', 'SecretAccessKey'].forEach(function (field) {\n\t\t\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t\t\t}\n\t\t\t\t\tAWS.params[field] = params[field];\n\t\t\t\t});\n\t\t}\n\t\t['region', 'cluster_name'].forEach(function (field) {\n\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t}\n\t\t\tAWS.params[field] = params[field];\n\t\t});\n\t},\n\n\tgetField: function (data, path) {\n\t\tvar steps = path.split('.');\n\t\tfor (var i = 0; i < steps.length; i++) {\n\t\t\tvar step = steps[i];\n\t\t\tif (typeof data !== 'object' || typeof data[step] === 'undefined') {\n\t\t\t\tthrow 'Required field was not found: ' + path;\n\t\t\t}\n\n\t\t\tdata = data[step];\n\t\t}\n\n\t\treturn data;\n\t},\n\n\tsign: function (key, message) {\n\t\tvar hex = hmac('sha256', key, message);\n\n\t\tif ((hex.length % 2) === 1) {\n\t\t\tthrow 'Invalid length of a hex string!';\n\t\t}\n\n\t\tvar result = new Int8Array(hex.length / 2);\n\t\tfor (var i = 0, b = 0; i < hex.length; i += 2, b++) {\n\t\t\tresult[b] = parseInt(hex.substring(i, i + 2), 16);\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tprepareParams: function (params) {\n\t\tvar result = [];\n\n\t\tObject.keys(params).sort().forEach(function (key) {\n\t\t\tif (typeof params[key] !== 'object') {\n\t\t\t\tresult.push(key + '=' + encodeURIComponent(params[key]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push(prepareObject(key, params[key]));\n\t\t\t}\n\t\t});\n\n\t\treturn result.join('&');\n\t},\n\n\trequest: function (method, region, service, host, params, data, uri) {\n\t\tif (typeof data === 'undefined' || data === null) {\n\t\t\tdata = '';\n\t\t}\n\n\t\tvar amzdate = (new Date()).toISOString().replace(/\\.\\d+Z/, 'Z').replace(/[-:]/g, ''),\n\t\t\tdate = amzdate.replace(/T\\d+Z/, ''),\n\n\t\t\tcanonical_uri = '/' + uri,\n\t\t\tcanonical_headers = 'content-encoding:amz-1.0\\n' + 'host:' + host + '\\n' + 'x-amz-date:' + amzdate + '\\n',\n\t\t\tsigned_headers = 'content-encoding;host;x-amz-date',\n\t\t\tcanonical_request = method + '\\n' + canonical_uri + '\\n' + params + '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + sha256(data),\n\t\t\tcredential_scope = date + '/' + region + '/' + service + '/' + 'aws4_request',\n\t\t\trequest_string = 'AWS4-HMAC-SHA256' + '\\n' + amzdate + '\\n' + credential_scope + '\\n' + sha256(canonical_request),\n\t\t\tkey = AWS.sign('AWS4' + AWS.params.SecretAccessKey, date);\n\n\t\tkey = AWS.sign(key, region);\n\t\tkey = AWS.sign(key, service);\n\t\tkey = AWS.sign(key, 'aws4_request');\n\n\t\tvar request = new HttpRequest(),\n\t\t\turl = 'https://' + host + canonical_uri + '?' + params;\n\n\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t}\n\t\trequest.addHeader('x-amz-date: ' + amzdate);\n\t\trequest.addHeader('x-amz-content-sha256:' + sha256(data));\n\t\trequest.addHeader('Accept: application/json');\n\t\trequest.addHeader('Content-Type: application/x-www-form-urlencoded');\n\t\trequest.addHeader('Content-Encoding: amz-1.0');\n\t\trequest.addHeader('Authorization: ' + 'AWS4-HMAC-SHA256 Credential=' + AWS.params.AccessKeyId + '/' + credential_scope + ', ' + 'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + hmac('sha256', key, request_string));\n\t\tif (AWS.params.auth_type === 'role_base')\n\t\t\trequest.addHeader('X-Amz-Security-Token: ' + AWS.params.Token);\n\n\t\tZabbix.log(4, '[ AWS ECS ] Sending request: ' + url);\n\n\t\tresponse = request.post(url, data);\n\n\t\tZabbix.log(4, '[ AWS ECS ] Received response with status code ' + request.getStatus() + ': ' + response);\n\n\t\tif (request.getStatus() !== 200) {\n\t\t\tthrow 'Request failed with status code ' + request.getStatus() + ': ' + response;\n\t\t}\n\n\t\ttry {\n\t\t\tresponse = JSON.parse(response);\n\t\t}\n\t\tcatch (error) {\n\t\t\tthrow 'Failed to parse response received from AWS API. Check debug log for more information.';\n\t\t}\n\n\t\treturn response;\n\t},\n\n\tlistServices: function () {\n\t\tvar payload = {},\n\t\t\tresult,\n\t\t\tECSClusters_Services,\n\t\t\tservices = [];\n\n\t\tpayload['Action'] = 'ListServices';\n\t\tpayload['Version'] = '2014-11-13';\n\t\tpayload['cluster'] = AWS.params.cluster_name;\n\n\t\tresult = AWS.request('POST', AWS.params.region, 'ecs', 'ecs.' + AWS.params.region + '.amazonaws.com', AWS.prepareParams(payload), '', '');\n\t\tECSClusters_Services = AWS.getField(result, 'ListServicesResponse.ListServicesResult.serviceArns')\n\n\t\tfor (k in ECSClusters_Services) {\n\t\t\tid = ECSClusters_Services[k];\n\n\t\t\tjson = {};\n\t\t\tinput = id.split(AWS.params.cluster_name + '/');\n\t\t\tfor (var i = 1; i < input.length; i += 2) {\n\t\t\t\tjson[input[i]] = input[i + 1];\n\t\t\t}\n\t\t\tservices.push({\n\t\t\t\t'service_name': input[1],\n\t\t\t});\n\t\t}\n\n\t\tif (Array.isArray(services))\n\t\t\treturn services;\n\t\telse\n\t\t\treturn [services];\n\n\t},\n\n\n\tListTasks: function () {\n\t\tvar payload = {},\n\t\t\tresult,\n\t\t\tECSClusters_Services_Tasks,\n\t\t\ttasks = [];\n\n\t\tpayload['Action'] = 'ListTasks';\n\t\tpayload['Version'] = '2014-11-13';\n\t\tpayload['cluster'] = AWS.params.cluster_name;\n\t\tpayload['status'] = AWS.params.status;\n\n\t\tresult = AWS.request('POST', AWS.params.region, 'ecs', 'ecs.' + AWS.params.region + '.amazonaws.com', AWS.prepareParams(payload), '', '');\n\t\tECSClusters_Services_Tasks = AWS.getField(result, 'ListTasksResponse.ListTasksResult.taskArns')\n\t\tfor (k in ECSClusters_Services_Tasks) {\n\t\t\tid = ECSClusters_Services_Tasks[k];\n\t\t\tjson = {};\n\t\t\tinput = id.split(AWS.params.cluster_name + '/');\n\t\t\tfor (var i = 1; i < input.length; i += 2) {\n\t\t\t\tjson[input[i]] = input[i + 1];\n\t\t\t}\n\t\t\ttasks.push({\n\t\t\t\t'task_id': input[1],\n\t\t\t});\n\t\t}\n\n\t\tif (Array.isArray(tasks))\n\t\t\treturn tasks;\n\t\telse\n\t\t\treturn [tasks];\n\t}\n};\n\ntry {\n\tAWS.setParams(JSON.parse(value));\n\tvar services = AWS.listServices(),\n\t\ttasks = AWS.ListTasks();\n\treturn JSON.stringify(({ services, tasks }));\n}\ncatch (error) {\n\terror += (String(error).endsWith('.')) ? '' : '.';\n\tZabbix.log(3, '[ AWS ECS ] ERROR: ' + error);\n\treturn JSON.stringify({ 'error': error });\n}",
                        "description": "Get cluster services.\nFull metrics list related to ECS: https://docs.aws.amazon.com/AmazonECS/latest/userguide/metrics-dimensions.html",
                        "preprocessing": [
                            {
                                "type": "CHECK_NOT_SUPPORTED",
                                "parameters": [
                                    "-1"
                                ]
                            }
                        ],
                        "timeout": "15s",
                        "parameters": [
                            {
                                "name": "AccessKeyId",
                                "value": "{$AWS.ACCESS.KEY.ID}"
                            },
                            {
                                "name": "auth_type",
                                "value": "{$AWS.AUTH_TYPE}"
                            },
                            {
                                "name": "cluster_name",
                                "value": "{$AWS.ECS.CLUSTER.NAME}"
                            },
                            {
                                "name": "proxy",
                                "value": "{$AWS.PROXY}"
                            },
                            {
                                "name": "region",
                                "value": "{$AWS.REGION}"
                            },
                            {
                                "name": "SecretAccessKey",
                                "value": "{$AWS.SECRET.ACCESS.KEY}"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "component",
                                "value": "raw"
                            }
                        ]
                    },
                    {
                        "uuid": "f45389a638c645f8905dc69d6cafb8b3",
                        "name": "Get cluster metrics",
                        "type": "SCRIPT",
                        "key": "aws.ecs.get_metrics",
                        "delay": "0s;m/1",
                        "history": "0",
                        "value_type": "TEXT",
                        "trends": "0",
                        "params": "var AWS = {\n\tparams: {},\n\trequest_period: 600,\n\tmetadata: 'http://169.254.169.254/latest/meta-data/iam/security-credentials',\n\n\tsetParams: function (params) {\n\t\tAWS.params['proxy'] = params.proxy;\n\t\tswitch (AWS.getField(params, 'auth_type')) {\n\t\t\tcase 'role_base':\n\t\t\t\tAWS.params['auth_type'] = 'role_base';\n\t\t\t\tvar request = new HttpRequest();\n\t\t\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t\t\t}\n\t\t\t\tvar IamRoleName = request.get(AWS.metadata);\n\n\t\t\t\tif (request.getStatus() !== 200 || IamRoleName === null || IamRoleName === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata. Role not found.';\n\t\t\t\t}\n\n\t\t\t\tcredentials = request.get(AWS.metadata + '/' + encodeURI(IamRoleName));\n\n\t\t\t\tif (request.getStatus() !== 200 || credentials === null || credentials === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata.';\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = JSON.parse(credentials);\n\t\t\t\t}\n\t\t\t\tcatch (error) {\n\t\t\t\t\tthrow 'Failed to parse response received from instance metadata. Check debug log for more information.';\n\t\t\t\t}\n\n\t\t\t\t['AccessKeyId', 'SecretAccessKey', 'Token'].forEach(function (field) {\n\t\t\t\t\tif (typeof credentials !== 'object' || typeof credentials[field] === 'undefined' || credentials[field] === '') {\n\t\t\t\t\t\tthrow 'Required credentials is not set: \"' + field + '\".';\n\t\t\t\t\t};\n\t\t\t\t\tAWS.params[field] = credentials[field];\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'access_key':\n\t\t\tdefault:\n\t\t\t\tAWS.params['auth_type'] = 'access_key';\n\t\t\t\t['AccessKeyId', 'SecretAccessKey'].forEach(function (field) {\n\t\t\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t\t\t}\n\t\t\t\t\tAWS.params[field] = params[field];\n\t\t\t\t});\n\t\t}\n\t\t['region', 'cluster_name'].forEach(function (field) {\n\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t}\n\t\t\tAWS.params[field] = params[field];\n\t\t});\n\t},\n\n\tgetField: function (data, path) {\n\t\tvar steps = path.split('.');\n\t\tfor (var i = 0; i < steps.length; i++) {\n\t\t\tvar step = steps[i];\n\t\t\tif (typeof data !== 'object' || typeof data[step] === 'undefined') {\n\t\t\t\tthrow 'Required field was not found: ' + path;\n\t\t\t}\n\n\t\t\tdata = data[step];\n\t\t}\n\n\t\treturn data;\n\t},\n\n\tsign: function (key, message) {\n\t\tvar hex = hmac('sha256', key, message);\n\n\t\tif ((hex.length % 2) === 1) {\n\t\t\tthrow 'Invalid length of a hex string!';\n\t\t}\n\n\t\tvar result = new Int8Array(hex.length / 2);\n\t\tfor (var i = 0, b = 0; i < hex.length; i += 2, b++) {\n\t\t\tresult[b] = parseInt(hex.substring(i, i + 2), 16);\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tprepareRecursive: function (prefix, param) {\n\t\tvar result = {};\n\n\t\tif (typeof param === 'object') {\n\t\t\tif (Array.isArray(param)) {\n\t\t\t\tparam.forEach(function (value, index) {\n\t\t\t\t\tvar nested = AWS.prepareRecursive(prefix + '.member.' + (index + 1), value);\n\t\t\t\t\tObject.keys(nested).forEach(function (key) {\n\t\t\t\t\t\tresult[key] = nested[key];\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject.keys(param).forEach(function (k) {\n\t\t\t\t\tvar nested = AWS.prepareRecursive(prefix + '.' + k, param[k]);\n\t\t\t\t\tObject.keys(nested).forEach(function (key) {\n\t\t\t\t\t\tresult[key] = nested[key];\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult[prefix] = param;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\trenderPayload: function (period, cluster_name) {\n\t\tvar metrics_list = [\n\t\t\t'ContainerInstanceCount:Count',\n\t\t\t'ServiceCount:Count',\n\t\t\t'CpuReserved:None',\n\t\t\t'CpuUtilized:None',\n\t\t\t'MemoryReserved:Megabytes',\n\t\t\t'MemoryUtilized:Megabytes',\n\t\t\t'NetworkRxBytes:Bytes/Second',\n\t\t\t'NetworkTxBytes:Bytes/Second',\n\t\t\t'StorageReadBytes:Bytes',\n\t\t\t'StorageWriteBytes:Bytes',\n\t\t\t'TaskCount:Count'\n\t\t];\n\n\t\tvar metric_payload = [];\n\t\tmetrics_list.forEach(function (metric) {\n\t\t\tvar parts = metric.split(':', 2);\n\t\t\tvar name = parts[0].replace(/[^a-zA-Z0-9]/g, '');\n\t\t\tmetric_payload.push({\n\t\t\t\t'Id': name.charAt(0).toLowerCase() + name.slice(1),\n\t\t\t\t'MetricStat': {\n\t\t\t\t\t'Metric': {\n\t\t\t\t\t\t'MetricName': parts[0],\n\t\t\t\t\t\t'Namespace': 'ECS/ContainerInsights',\n\t\t\t\t\t\t'Dimensions': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'Name': 'ClusterName',\n\t\t\t\t\t\t\t\t'Value': cluster_name\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t'Period': period,\n\t\t\t\t\t'Stat': 'Average',\n\t\t\t\t\t'Unit': parts[1]\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn metric_payload;\n\t},\n\n\tprepareParams: function (params) {\n\t\tvar result = [];\n\n\t\tObject.keys(params).sort().forEach(function (key) {\n\t\t\tif (typeof params[key] !== 'object') {\n\t\t\t\tresult.push(key + '=' + encodeURIComponent(params[key]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push(prepareObject(key, params[key]));\n\t\t\t}\n\t\t});\n\n\t\treturn result.join('&');\n\t},\n\n\trequest: function (method, region, service, params, data) {\n\t\tif (typeof data === 'undefined' || data === null) {\n\t\t\tdata = '';\n\t\t}\n\n\t\tvar amzdate = (new Date()).toISOString().replace(/\\.\\d+Z/, 'Z').replace(/[-:]/g, ''),\n\t\t\tdate = amzdate.replace(/T\\d+Z/, ''),\n\t\t\thost = service + '.' + region + '.amazonaws.com',\n\t\t\tcanonical_uri = '/',\n\t\t\tcanonical_headers = 'content-encoding:amz-1.0\\n' + 'host:' + host + '\\n' + 'x-amz-date:' + amzdate + '\\n',\n\t\t\tsigned_headers = 'content-encoding;host;x-amz-date',\n\t\t\tcanonical_request = method + '\\n' + canonical_uri + '\\n' + params + '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + sha256(data),\n\t\t\tcredential_scope = date + '/' + region + '/' + service + '/' + 'aws4_request',\n\t\t\trequest_string = 'AWS4-HMAC-SHA256' + '\\n' + amzdate + '\\n' + credential_scope + '\\n' + sha256(canonical_request),\n\t\t\tkey = AWS.sign('AWS4' + AWS.params.SecretAccessKey, date);\n\n\t\tkey = AWS.sign(key, region);\n\t\tkey = AWS.sign(key, service);\n\t\tkey = AWS.sign(key, 'aws4_request');\n\n\t\tvar request = new HttpRequest(),\n\t\t\turl = 'https://' + host + canonical_uri + '?' + params;\n\n\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t}\n\t\trequest.addHeader('x-amz-date: ' + amzdate);\n\t\trequest.addHeader('Accept: application/json');\n\t\trequest.addHeader('Content-Type: application/json');\n\t\trequest.addHeader('Content-Encoding: amz-1.0');\n\t\trequest.addHeader('Authorization: ' + 'AWS4-HMAC-SHA256 Credential=' + AWS.params.AccessKeyId + '/' + credential_scope + ', ' + 'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + hmac('sha256', key, request_string));\n\t\tif (AWS.params.auth_type === 'role_base')\n\t\t\trequest.addHeader('X-Amz-Security-Token: ' + AWS.params.Token);\n\n\t\tZabbix.log(4, '[ AWS ECS  ] Sending request: ' + url);\n\n\t\tresponse = request.get(url);\n\n\t\tZabbix.log(4, '[ AWS ECS ] Received response with status code ' + request.getStatus() + ': ' + response);\n\n\t\tif (request.getStatus() !== 200) {\n\t\t\tthrow 'Request failed with status code ' + request.getStatus() + ': ' + response;\n\t\t}\n\n\t\tif (response !== null) {\n\t\t\ttry {\n\t\t\t\tresponse = JSON.parse(response);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tthrow 'Failed to parse response received from AWS CloudWatch API. Check debug log for more information.';\n\t\t\t}\n\t\t}\n\n\t\treturn response;\n\t},\n\n\tgetMetricsData: function () {\n\t\tvar timestamp = new Date().getTime(),\n\t\t\tMetricData = [],\n\t\t\tCPUUtilization,\n\t\t\tMemoryUtilization,\n\t\t\tDiskUtilization,\n\t\t\tobj = {},\n\t\t\tmetrics = ['CpuReserved', 'CpuUtilized', 'MemoryReserved', 'MemoryUtilized'],\n\t\t\tend_time = new Date(timestamp).toISOString().replace(/\\.\\d+Z/, 'Z'),\n\t\t\tstart_time = new Date(timestamp - AWS.request_period * 1000).toISOString().replace(/\\.\\d+Z/, 'Z'),\n\t\t\tpayload = AWS.prepareRecursive('MetricDataQueries', AWS.renderPayload(AWS.request_period, AWS.params.cluster_name));\n\n\t\tpayload['Action'] = 'GetMetricData';\n\t\tpayload['Version'] = '2010-08-01';\n\t\tpayload['StartTime'] = start_time;\n\t\tpayload['EndTime'] = end_time;\n\t\tpayload['ScanBy'] = 'TimestampDescending';\n\n\t\tresult = AWS.request('GET', AWS.params.region, 'monitoring', AWS.prepareParams(payload));\n\t\tMetricData = AWS.getField(result, 'GetMetricDataResponse.GetMetricDataResult.MetricDataResults')\n\n\t\tMetricData.forEach(function (id) {\n\t\t\tfor (i in metrics) {\n\t\t\t\tif (AWS.getField(id, 'Label') === metrics[i]) {\n\t\t\t\t\tobj[metrics[i]] = AWS.getField(id, 'Values');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tCPUUtilization = Math.abs(obj.CpuUtilized * 100 / obj.CpuReserved);\n\t\tMemoryUtilization = Math.abs(obj.MemoryUtilized * 100 / obj.MemoryReserved);\n\t\treturn ({ MetricData, MemoryUtilization, CPUUtilization, DiskUtilization });\n\t}\n};\n\ntry {\n\tAWS.setParams(JSON.parse(value));\n\n\treturn JSON.stringify(AWS.getMetricsData());\n}\ncatch (error) {\n\terror += (String(error).endsWith('.')) ? '' : '.';\n\tZabbix.log(3, '[ AWS ECS ] ERROR: ' + error);\n\n\treturn JSON.stringify({ 'error': error });\n}",
                        "description": "Get cluster metrics.\nFull metrics list related to ECS: https://docs.aws.amazon.com/AmazonECS/latest/userguide/metrics-dimensions.html",
                        "preprocessing": [
                            {
                                "type": "CHECK_NOT_SUPPORTED",
                                "parameters": [
                                    "-1"
                                ]
                            }
                        ],
                        "timeout": "15s",
                        "parameters": [
                            {
                                "name": "AccessKeyId",
                                "value": "{$AWS.ACCESS.KEY.ID}"
                            },
                            {
                                "name": "auth_type",
                                "value": "{$AWS.AUTH_TYPE}"
                            },
                            {
                                "name": "cluster_name",
                                "value": "{$AWS.ECS.CLUSTER.NAME}"
                            },
                            {
                                "name": "proxy",
                                "value": "{$AWS.PROXY}"
                            },
                            {
                                "name": "region",
                                "value": "{$AWS.REGION}"
                            },
                            {
                                "name": "SecretAccessKey",
                                "value": "{$AWS.SECRET.ACCESS.KEY}"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "component",
                                "value": "raw"
                            }
                        ]
                    },
                    {
                        "uuid": "0e1c53da0225410ea835f5d471afac13",
                        "name": "Memory Utilization",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.memory_utilization",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "FLOAT",
                        "units": "%",
                        "description": "'The memory being used by tasks in the resource that is specified by the dimension set that you're using.\n This metric is only collected for tasks that have a defined memory reservation in their task definition.'",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.MemoryUtilization"
                                ],
                                "error_handler": "DISCARD_VALUE"
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "memory"
                            }
                        ],
                        "triggers": [
                            {
                                "uuid": "a7df755466704f339e5479aeeca3fe30",
                                "expression": "min(/AWS ECS Cluster by HTTP/aws.ecs.memory_utilization,15m)>{$AWS.ECS.CLUSTER.MEMORY.UTIL.WARN}",
                                "name": "High memory utilization",
                                "event_name": "High memory utilization (over {$AWS.ECS.CLUSTER.MEMORY.UTIL.WARN}% for 15m)",
                                "opdata": "Current utilization: {ITEM.LASTVALUE1}",
                                "priority": "WARNING",
                                "description": "The system is running out of free memory.",
                                "tags": [
                                    {
                                        "tag": "scope",
                                        "value": "capacity"
                                    },
                                    {
                                        "tag": "scope",
                                        "value": "performance"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "a214cef0377b4901afc2cb90186e5e46",
                        "name": "Get metrics check",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.metrics.check",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "CHAR",
                        "trends": "0",
                        "description": "Data collection check.",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.error"
                                ],
                                "error_handler": "CUSTOM_VALUE"
                            },
                            {
                                "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                "parameters": [
                                    "3h"
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "status"
                            }
                        ],
                        "triggers": [
                            {
                                "uuid": "b475c468dbe0477f92b40122321235b0",
                                "expression": "length(last(/AWS ECS Cluster by HTTP/aws.ecs.metrics.check))>0",
                                "name": "Failed to get metrics data",
                                "opdata": "{ITEM.LASTVALUE1}",
                                "priority": "WARNING",
                                "tags": [
                                    {
                                        "tag": "scope",
                                        "value": "availability"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "4daa5e7b1bc64b3cbd54d9addea571cd",
                        "name": "Network rx bytes",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.network.rx",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "FLOAT",
                        "units": "Bps",
                        "description": "'The number of bytes received by the resource that is specified by the dimensions that you're using.\n This metric is only available for containers in tasks using the awsvpc or bridge network modes.'",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.MetricData[?(@.Label == \"NetworkRxBytes\")].Values.first().first()"
                                ],
                                "error_handler": "DISCARD_VALUE"
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "network"
                            }
                        ]
                    },
                    {
                        "uuid": "59882985019d42009a1993bf8bfd1a31",
                        "name": "Network tx bytes",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.network.tx",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "FLOAT",
                        "units": "Bps",
                        "description": "'The number of bytes transmitted by the resource that is specified by the dimensions that you're using.\n This metric is only available for containers in tasks using the awsvpc or bridge network modes.'",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.MetricData[?(@.Label == \"NetworkTxBytes\")].Values.first().first()"
                                ],
                                "error_handler": "DISCARD_VALUE"
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "network"
                            }
                        ]
                    },
                    {
                        "uuid": "26970ea823294cf2b87a158d8feee872",
                        "name": "Service Count",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.service_count",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "FLOAT",
                        "description": "'The number of services in the cluster.'",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.MetricData[?(@.Label == \"ServiceCount\")].Values.first().first()"
                                ],
                                "error_handler": "DISCARD_VALUE"
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "system"
                            }
                        ]
                    },
                    {
                        "uuid": "3cc6d826052c4da49bd8891a99ec2816",
                        "name": "Task Count",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.task_count",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "FLOAT",
                        "description": "'The number of tasks running in the cluster.'",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.MetricData[?(@.Label == \"TaskCount\")].Values.first().first()"
                                ],
                                "error_handler": "DISCARD_VALUE"
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "system"
                            }
                        ]
                    }
                ],
                "discovery_rules": [
                    {
                        "uuid": "5e1b53e77fd74b61864ed8437c635346",
                        "name": "Cluster Alarms discovery",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.alarms.discovery",
                        "delay": "0",
                        "filter": {
                            "evaltype": "AND",
                            "conditions": [
                                {
                                    "macro": "{#ALARM_NAME}",
                                    "value": "{$AWS.ECS.LLD.FILTER.ALARM_NAME.MATCHES}",
                                    "formulaid": "A"
                                },
                                {
                                    "macro": "{#ALARM_NAME}",
                                    "value": "{$AWS.ECS.LLD.FILTER.ALARM_NAME.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "B"
                                },
                                {
                                    "macro": "{#ALARM_SERVICE_NAMESPACE}",
                                    "value": "{$AWS.ECS.LLD.FILTER.ALARM_SERVICE_NAMESPACE.MATCHES}",
                                    "formulaid": "C"
                                },
                                {
                                    "macro": "{#ALARM_SERVICE_NAMESPACE}",
                                    "value": "{$AWS.ECS.LLD.FILTER.ALARM_SERVICE_NAMESPACE.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "D"
                                }
                            ]
                        },
                        "description": "Discovery instance alarms.",
                        "item_prototypes": [
                            {
                                "uuid": "98d3f64416f746639055abdda6dfc374",
                                "name": "[{#ALARM_NAME}]: Get metrics",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.alarm.get_metrics[\"{#ALARM_NAME}\"]",
                                "delay": "0",
                                "history": "0",
                                "value_type": "TEXT",
                                "trends": "0",
                                "description": "Get alarm metrics about the state and its reason.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.AlarmName == \"{#ALARM_NAME}\")].first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.get_alarms"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "raw"
                                    }
                                ]
                            },
                            {
                                "uuid": "8a862dd5444f459b88f91a9fdb2ddc5e",
                                "name": "[{#ALARM_NAME}]: State",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.alarm.state[\"{#ALARM_NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "description": "The state value for the alarm. Possible values: 0 (OK), 1 (INSUFFICIENT_DATA), 2 (ALARM).\nAlarm description:\n{#ALARM_DESCRIPTION}",
                                "valuemap": {
                                    "name": "Alarm state"
                                },
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.StateValue"
                                        ],
                                        "error_handler": "CUSTOM_VALUE",
                                        "error_handler_params": "3"
                                    },
                                    {
                                        "type": "JAVASCRIPT",
                                        "parameters": [
                                            "var state = ['OK', 'INSUFFICIENT_DATA', 'ALARM'];\n\nreturn state.indexOf(value.trim()) === -1 ? 255 : state.indexOf(value.trim());"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.alarm.get_metrics[\"{#ALARM_NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "alarms"
                                    }
                                ],
                                "trigger_prototypes": [
                                    {
                                        "uuid": "50061fea24e744298732167898c34e5f",
                                        "expression": "last(/AWS ECS Cluster by HTTP/aws.ecs.alarm.state[\"{#ALARM_NAME}\"])=1",
                                        "name": "[{#ALARM_NAME}] has 'Insufficient data' state",
                                        "priority": "INFO",
                                        "tags": [
                                            {
                                                "tag": "scope",
                                                "value": "notice"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "uuid": "eacb27b638924fa289e7c119f97879d8",
                                "name": "[{#ALARM_NAME}]: State reason",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.alarm.state_reason[\"{#ALARM_NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "TEXT",
                                "trends": "0",
                                "description": "An explanation for the alarm state, in text format.\nAlarm description:\n{#ALARM_DESCRIPTION}",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.StateReason"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    },
                                    {
                                        "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                        "parameters": [
                                            "3h"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.alarm.get_metrics[\"{#ALARM_NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "alarms"
                                    }
                                ]
                            }
                        ],
                        "trigger_prototypes": [
                            {
                                "uuid": "25d14cc75ade4f7881825d5ab7864ca0",
                                "expression": "last(/AWS ECS Cluster by HTTP/aws.ecs.alarm.state[\"{#ALARM_NAME}\"])=2 and length(last(/AWS ECS Cluster by HTTP/aws.ecs.alarm.state_reason[\"{#ALARM_NAME}\"]))>0",
                                "name": "[{#ALARM_NAME}] has 'Alarm' state",
                                "priority": "AVERAGE",
                                "description": "Alarm \"{#ALARM_NAME}\" has 'Alarm' state. \nReason: {ITEM.LASTVALUE2}",
                                "tags": [
                                    {
                                        "tag": "scope",
                                        "value": "availability"
                                    }
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_alarms"
                        },
                        "preprocessing": [
                            {
                                "type": "JAVASCRIPT",
                                "parameters": [
                                    "var result = [];\nvar alarms = JSON.parse(value);\n\nalarms.forEach(function(alarm) {\n\n result.push({\n'{#ALARM_DESCRIPTION}': alarm.AlarmDescription !== null ? alarm.AlarmDescription : 'None' ,\n'{#ALARM_NAME}': alarm.AlarmName,\n'{#ALARM_PERIOD}': alarm.Period,\n'{#METRIC_NAME}': alarm.MetricName,\n'{#ALARM_SERVICE_NAMESPACE}': alarm.Namespace !== null ? alarm.Namespace : 'None'\n  });\n});\n\nreturn JSON.stringify(result);"
                                ]
                            },
                            {
                                "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                "parameters": [
                                    "3h"
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "7ab2cc38ab6f4400b42bee282a7e25e1",
                        "name": "Cluster Services discovery",
                        "type": "DEPENDENT",
                        "key": "aws.ecs.services.discovery",
                        "delay": "0",
                        "filter": {
                            "evaltype": "AND",
                            "conditions": [
                                {
                                    "macro": "{#AWS.ECS.SERVICE.NAME}",
                                    "value": "{$AWS.ECS.LLD.FILTER.SERVICE.MATCHES}",
                                    "formulaid": "A"
                                },
                                {
                                    "macro": "{#AWS.ECS.SERVICE.NAME}",
                                    "value": "{$AWS.ECS.LLD.FILTER.SERVICE.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "B"
                                }
                            ]
                        },
                        "description": "Discovery {$AWS.ECS.CLUSTER.NAME} services.",
                        "item_prototypes": [
                            {
                                "uuid": "51de81c8bdcb4359b347e9d9226fcb4b",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: CPU Utilization",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.cpu.utilization[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "%",
                                "description": "\"A number of CPU units used by tasks in the resource that is specified by the dimension set that you're using.\n This metric is only collected for tasks that have a defined CPU reservation in their task definition.\"",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"AWS/ECS CPUUtilization\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "cpu"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ],
                                "trigger_prototypes": [
                                    {
                                        "uuid": "3e8d8d35d5ad4f70ad792fe943a499d2",
                                        "expression": "min(/AWS ECS Cluster by HTTP/aws.ecs.services.cpu.utilization[\"{#AWS.ECS.SERVICE.NAME}\"],15m)>{$AWS.ECS.CLUSTER.SERVICE.CPU.UTIL.WARN}",
                                        "name": "[{#AWS.ECS.SERVICE.NAME}]: High CPU utilization",
                                        "event_name": "[{#AWS.ECS.SERVICE.NAME}]: High CPU utilization (over {$AWS.ECS.CLUSTER.SERVICE.CPU.UTIL.WARN}% for 15m)",
                                        "opdata": "Current utilization: {ITEM.LASTVALUE1}",
                                        "priority": "WARNING",
                                        "description": "The CPU utilization is too high. The system might be slow to respond.",
                                        "tags": [
                                            {
                                                "tag": "scope",
                                                "value": "capacity"
                                            },
                                            {
                                                "tag": "scope",
                                                "value": "performance"
                                            },
                                            {
                                                "tag": "service",
                                                "value": "{#AWS.ECS.SERVICE.NAME}"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "uuid": "ba01726f96354fe681fb4d916d461460",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: CPU Reserved",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.cpu_reserved[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "\"A number of CPU units reserved by tasks in the resource that is specified by the dimension set that you're using.\n This metric is only collected for tasks that have a defined CPU reservation in their task definition.\"",
                                "valuemap": {
                                    "name": "CPU Reserved"
                                },
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ECS/ContainerInsights CpuReserved\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "cpu"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "785fd19ab3344e749ce486e4601f4d8e",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: Desired Task",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.desired.task[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The desired number of tasks for an {#AWS.ECS.SERVICE.NAME} service.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ECS/ContainerInsights DesiredTaskCount\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    },
                                    {
                                        "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                        "parameters": [
                                            "3h"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "d12aae43f0f3446d96e2141a0bf303b8",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: Get metrics",
                                "type": "SCRIPT",
                                "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0s;m/5",
                                "history": "0",
                                "value_type": "TEXT",
                                "trends": "0",
                                "params": "var AWS = {\n\tparams: {},\n\trequest_period: 600,\n\tmetadata: 'http://169.254.169.254/latest/meta-data/iam/security-credentials',\n\n\tsetParams: function (params) {\n\t\tAWS.params['proxy'] = params.proxy;\n\t\tswitch (AWS.getField(params, 'auth_type')) {\n\t\t\tcase 'role_base':\n\t\t\t\tAWS.params['auth_type'] = 'role_base';\n\t\t\t\tvar request = new HttpRequest();\n\t\t\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t\t\t}\n\t\t\t\tvar IamRoleName = request.get(AWS.metadata);\n\n\t\t\t\tif (request.getStatus() !== 200 || IamRoleName === null || IamRoleName === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata. Role not found.';\n\t\t\t\t}\n\n\t\t\t\tcredentials = request.get(AWS.metadata + '/' + encodeURI(IamRoleName));\n\n\t\t\t\tif (request.getStatus() !== 200 || credentials === null || credentials === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata.';\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = JSON.parse(credentials);\n\t\t\t\t}\n\t\t\t\tcatch (error) {\n\t\t\t\t\tthrow 'Failed to parse response received from instance metadata. Check debug log for more information.';\n\t\t\t\t}\n\n\t\t\t\t['AccessKeyId', 'SecretAccessKey', 'Token'].forEach(function (field) {\n\t\t\t\t\tif (typeof credentials !== 'object' || typeof credentials[field] === 'undefined' || credentials[field] === '') {\n\t\t\t\t\t\tthrow 'Required credentials is not set: \"' + field + '\".';\n\t\t\t\t\t};\n\t\t\t\t\tAWS.params[field] = credentials[field];\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'access_key':\n\t\t\tdefault:\n\t\t\t\tAWS.params['auth_type'] = 'access_key';\n\t\t\t\t['AccessKeyId', 'SecretAccessKey'].forEach(function (field) {\n\t\t\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t\t\t}\n\t\t\t\t\tAWS.params[field] = params[field];\n\t\t\t\t});\n\t\t}\n\t\t['region', 'cluster_name', 'service_name'].forEach(function (field) {\n\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t}\n\t\t\tAWS.params[field] = params[field];\n\t\t});\n\t},\n\n\tgetField: function (data, path) {\n\t\tvar steps = path.split('.');\n\t\tfor (var i = 0; i < steps.length; i++) {\n\t\t\tvar step = steps[i];\n\t\t\tif (typeof data !== 'object' || typeof data[step] === 'undefined') {\n\t\t\t\tthrow 'Required field was not found: ' + path;\n\t\t\t}\n\n\t\t\tdata = data[step];\n\t\t}\n\n\t\treturn data;\n\t},\n\n\tsign: function (key, message) {\n\t\tvar hex = hmac('sha256', key, message);\n\n\t\tif ((hex.length % 2) === 1) {\n\t\t\tthrow 'Invalid length of a hex string!';\n\t\t}\n\n\t\tvar result = new Int8Array(hex.length / 2);\n\t\tfor (var i = 0, b = 0; i < hex.length; i += 2, b++) {\n\t\t\tresult[b] = parseInt(hex.substring(i, i + 2), 16);\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tprepareRecursive: function (prefix, param) {\n\t\tvar result = {};\n\n\t\tif (typeof param === 'object') {\n\t\t\tif (Array.isArray(param)) {\n\t\t\t\tparam.forEach(function (value, index) {\n\t\t\t\t\tvar nested = AWS.prepareRecursive(prefix + '.member.' + (index + 1), value);\n\t\t\t\t\tObject.keys(nested).forEach(function (key) {\n\t\t\t\t\t\tresult[key] = nested[key];\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject.keys(param).forEach(function (k) {\n\t\t\t\t\tvar nested = AWS.prepareRecursive(prefix + '.' + k, param[k]);\n\t\t\t\t\tObject.keys(nested).forEach(function (key) {\n\t\t\t\t\t\tresult[key] = nested[key];\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult[prefix] = param;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\trenderPayload: function (period, cluster_name, service_name) {\n\t\tvar metrics_list = [\n\t\t\t'CpuReserved:None:ECS/ContainerInsights',\n\t\t\t'CpuUtilized:None:ECS/ContainerInsights',\n\t\t\t'CPUUtilization:Percent:AWS/ECS',\n\t\t\t'MemoryUtilization:Percent:AWS/ECS',\n\t\t\t'MemoryReserved:Megabytes:ECS/ContainerInsights',\n\t\t\t'MemoryUtilized:Megabytes:ECS/ContainerInsights',\n\t\t\t'NetworkRxBytes:Bytes/Second:ECS/ContainerInsights',\n\t\t\t'NetworkTxBytes:Bytes/Second:ECS/ContainerInsights',\n\t\t\t'StorageReadBytes:Bytes:ECS/ContainerInsights',\n\t\t\t'StorageWriteBytes:Bytes:ECS/ContainerInsights',\n\t\t\t'DeploymentCount:Count:ECS/ContainerInsights',\n\t\t\t'TaskSetCount:Count:ECS/ContainerInsights',\n\t\t\t'DesiredTaskCount:Count:ECS/ContainerInsights',\n\t\t\t'PendingTaskCount:Count:ECS/ContainerInsights',\n\t\t\t'RunningTaskCount:Count:ECS/ContainerInsights',\n\t\t\t'EphemeralStorageReserved:Gigabytes:ECS/ContainerInsights',\n\t\t\t'EphemeralStorageUtilized:Gigabytes:ECS/ContainerInsights'\n\t\t];\n\n\t\tvar metric_payload = [];\n\t\tmetrics_list.forEach(function (metric) {\n\t\t\tvar parts = metric.split(':', 3);\n\t\t\tvar name = parts[0].replace(/[^a-zA-Z0-9]/g, '');\n\t\t\tmetric_payload.push({\n\t\t\t\t'Id': name.charAt(0).toLowerCase() + name.slice(1),\n\t\t\t\t'MetricStat': {\n\t\t\t\t\t'Metric': {\n\t\t\t\t\t\t'MetricName': parts[0],\n\t\t\t\t\t\t'Namespace': parts[2],\n\t\t\t\t\t\t'Dimensions': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'Name': 'ClusterName',\n\t\t\t\t\t\t\t\t'Value': cluster_name\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'Name': 'ServiceName',\n\t\t\t\t\t\t\t\t'Value': service_name\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t'Period': period,\n\t\t\t\t\t'Stat': 'Average',\n\t\t\t\t\t'Unit': parts[1]\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn metric_payload;\n\t},\n\n\tprepareParams: function (params) {\n\t\tvar result = [];\n\n\t\tObject.keys(params).sort().forEach(function (key) {\n\t\t\tif (typeof params[key] !== 'object') {\n\t\t\t\tresult.push(key + '=' + encodeURIComponent(params[key]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push(prepareObject(key, params[key]));\n\t\t\t}\n\t\t});\n\n\t\treturn result.join('&');\n\t},\n\n\trequest: function (method, region, service, params, data) {\n\t\tif (typeof data === 'undefined' || data === null) {\n\t\t\tdata = '';\n\t\t}\n\n\t\tvar amzdate = (new Date()).toISOString().replace(/\\.\\d+Z/, 'Z').replace(/[-:]/g, ''),\n\t\t\tdate = amzdate.replace(/T\\d+Z/, ''),\n\t\t\thost = service + '.' + region + '.amazonaws.com',\n\t\t\tcanonical_uri = '/',\n\t\t\tcanonical_headers = 'content-encoding:amz-1.0\\n' + 'host:' + host + '\\n' + 'x-amz-date:' + amzdate + '\\n',\n\t\t\tsigned_headers = 'content-encoding;host;x-amz-date',\n\t\t\tcanonical_request = method + '\\n' + canonical_uri + '\\n' + params + '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + sha256(data),\n\t\t\tcredential_scope = date + '/' + region + '/' + service + '/' + 'aws4_request',\n\t\t\trequest_string = 'AWS4-HMAC-SHA256' + '\\n' + amzdate + '\\n' + credential_scope + '\\n' + sha256(canonical_request),\n\t\t\tkey = AWS.sign('AWS4' + AWS.params.SecretAccessKey, date);\n\n\t\tkey = AWS.sign(key, region);\n\t\tkey = AWS.sign(key, service);\n\t\tkey = AWS.sign(key, 'aws4_request');\n\n\t\tvar request = new HttpRequest(),\n\t\t\turl = 'https://' + host + canonical_uri + '?' + params;\n\n\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t}\n\t\trequest.addHeader('x-amz-date: ' + amzdate);\n\t\trequest.addHeader('Accept: application/json');\n\t\trequest.addHeader('Content-Type: application/json');\n\t\trequest.addHeader('Content-Encoding: amz-1.0');\n\t\trequest.addHeader('Authorization: ' + 'AWS4-HMAC-SHA256 Credential=' + AWS.params.AccessKeyId + '/' + credential_scope + ', ' + 'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + hmac('sha256', key, request_string));\n\t\tif (AWS.params.auth_type === 'role_base')\n\t\t\trequest.addHeader('X-Amz-Security-Token: ' + AWS.params.Token);\n\n\t\tZabbix.log(4, '[ AWS ECS  ] Sending request: ' + url);\n\n\t\tresponse = request.get(url);\n\n\t\tZabbix.log(4, '[ AWS ECS ] Received response with status code ' + request.getStatus() + ': ' + response);\n\n\t\tif (request.getStatus() !== 200) {\n\t\t\tthrow 'Request failed with status code ' + request.getStatus() + ': ' + response;\n\t\t}\n\n\t\tif (response !== null) {\n\t\t\ttry {\n\t\t\t\tresponse = JSON.parse(response);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tthrow 'Failed to parse response received from AWS CloudWatch API. Check debug log for more information.';\n\t\t\t}\n\t\t}\n\n\t\treturn response;\n\t},\n\n\tgetMetricsData: function () {\n\t\tvar timestamp = new Date().getTime(),\n\t\t\tend_time = new Date(timestamp).toISOString().replace(/\\.\\d+Z/, 'Z'),\n\t\t\tstart_time = new Date(timestamp - AWS.request_period * 1000).toISOString().replace(/\\.\\d+Z/, 'Z'),\n\t\t\tpayload = AWS.prepareRecursive('MetricDataQueries', AWS.renderPayload(AWS.request_period, AWS.params.cluster_name, AWS.params.service_name));\n\n\t\tpayload['Action'] = 'GetMetricData';\n\t\tpayload['Version'] = '2010-08-01';\n\t\tpayload['StartTime'] = start_time;\n\t\tpayload['EndTime'] = end_time;\n\t\tpayload['ScanBy'] = 'TimestampDescending';\n\n\t\tresult = AWS.request('GET', AWS.params.region, 'monitoring', AWS.prepareParams(payload));\n\t\tMetricData = AWS.getField(result, 'GetMetricDataResponse.GetMetricDataResult.MetricDataResults')\n\n\t\treturn MetricData;\n\t}\n};\n\ntry {\n\tAWS.setParams(JSON.parse(value));\n\n\treturn JSON.stringify(AWS.getMetricsData());\n}\ncatch (error) {\n\terror += (String(error).endsWith('.')) ? '' : '.';\n\tZabbix.log(3, '[ AWS ECS ] ERROR: ' + error);\n\n\treturn JSON.stringify({ 'error': error });\n}",
                                "description": "Get metrics of ESC services.\nFull metrics list related to ECS : https://docs.aws.amazon.com/ecs/index.html",
                                "preprocessing": [
                                    {
                                        "type": "CHECK_NOT_SUPPORTED",
                                        "parameters": [
                                            "-1"
                                        ]
                                    }
                                ],
                                "timeout": "15s",
                                "parameters": [
                                    {
                                        "name": "AccessKeyId",
                                        "value": "{$AWS.ACCESS.KEY.ID}"
                                    },
                                    {
                                        "name": "auth_type",
                                        "value": "{$AWS.AUTH_TYPE}"
                                    },
                                    {
                                        "name": "cluster_name",
                                        "value": "{$AWS.ECS.CLUSTER.NAME}"
                                    },
                                    {
                                        "name": "proxy",
                                        "value": "{$AWS.PROXY}"
                                    },
                                    {
                                        "name": "region",
                                        "value": "{$AWS.REGION}"
                                    },
                                    {
                                        "name": "SecretAccessKey",
                                        "value": "{$AWS.SECRET.ACCESS.KEY}"
                                    },
                                    {
                                        "name": "service_name",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ],
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "raw"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "685671b8a8c34f35ada959c2c6aca1e3",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: Memory utilization",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.memory.utilization[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "%",
                                "description": "'The memory being used by tasks in the resource that is specified by the dimension set that you're using.\nThis metric is only collected for tasks that have a defined memory reservation in their task definition.'",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"AWS/ECS MemoryUtilization\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "memory"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ],
                                "trigger_prototypes": [
                                    {
                                        "uuid": "a1116a5e75f24b50864a0fb5ea7ad99d",
                                        "expression": "min(/AWS ECS Cluster by HTTP/aws.ecs.services.memory.utilization[\"{#AWS.ECS.SERVICE.NAME}\"],15m)>{$AWS.ECS.CLUSTER.SERVICE.MEMORY.UTIL.WARN}",
                                        "name": "[{#AWS.ECS.SERVICE.NAME}]: High memory utilization",
                                        "event_name": "[{#AWS.ECS.SERVICE.NAME}]: High memory utilization (over {$AWS.ECS.CLUSTER.SERVICE.MEMORY.UTIL.WARN}% for 15m)",
                                        "opdata": "Current utilization: {ITEM.LASTVALUE1}",
                                        "priority": "WARNING",
                                        "description": "The system is running out of free memory.",
                                        "tags": [
                                            {
                                                "tag": "scope",
                                                "value": "capacity"
                                            },
                                            {
                                                "tag": "scope",
                                                "value": "performance"
                                            },
                                            {
                                                "tag": "service",
                                                "value": "{#AWS.ECS.SERVICE.NAME}"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "uuid": "538e0157704e40ffa124d6b74208f71b",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: Memory reserved",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.memory_reserved[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "B",
                                "description": "'The memory that is reserved by tasks in the resource that is specified by the dimension set that you're using.\nThis metric is only collected for tasks that have a defined memory reservation in their task definition.'",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ECS/ContainerInsights MemoryReserved\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    },
                                    {
                                        "type": "MULTIPLIER",
                                        "parameters": [
                                            "1048576"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "memory"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "80471d41639f4e7a87174cad13f7f3a4",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: Memory utilized",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.memory_utilized[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "B",
                                "description": "'The memory being used by tasks in the resource that is specified by the dimension set that you're using.\nThis metric is only collected for tasks that have a defined memory reservation in their task definition.'",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ECS/ContainerInsights MemoryUtilized\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    },
                                    {
                                        "type": "MULTIPLIER",
                                        "parameters": [
                                            "1048576"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "memory"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "52c14dd824174368acc0918d1c4670e4",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: Network rx bytes",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.network.rx[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "Bps",
                                "description": "'The number of bytes received by the resource that is specified by the dimensions that you're using.\nThis metric is only available for containers in tasks using the awsvpc or bridge network modes.'",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ECS/ContainerInsights NetworkRxBytes\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "network"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "598337e977b2460ca3ce0844061a619c",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: Network tx bytes",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.network.tx[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "Bps",
                                "description": "'The number of bytes transmitted by the resource that is specified by the dimensions that you're using.\nThis metric is only available for containers in tasks using the awsvpc or bridge network modes.'",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ECS/ContainerInsights NetworkTxBytes\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "network"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "38d4200dad444b42b77e3fd1fe355007",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: Pending Task",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.pending.task[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of tasks currently in the `pending` state.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ECS/ContainerInsights PendingTaskCount\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    },
                                    {
                                        "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                        "parameters": [
                                            "3h"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "3e1538ea18d7417889536bfce39bc22c",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: Running Task",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.running.task[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of tasks currently in the `running` state.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ECS/ContainerInsights RunningTaskCount\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    },
                                    {
                                        "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                        "parameters": [
                                            "3h"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "46b30a391af44cc5b9a70832189ffb2b",
                                "name": "[{#AWS.ECS.SERVICE.NAME}]: Task Set",
                                "type": "DEPENDENT",
                                "key": "aws.ecs.services.task.set[\"{#AWS.ECS.SERVICE.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of task sets in the {#AWS.ECS.SERVICE.NAME} service.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ECS/ContainerInsights TaskSetCount\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    },
                                    {
                                        "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                        "parameters": [
                                            "3h"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.ecs.services.get_metrics[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "services"
                                    },
                                    {
                                        "tag": "service",
                                        "value": "{#AWS.ECS.SERVICE.NAME}"
                                    }
                                ]
                            }
                        ],
                        "graph_prototypes": [
                            {
                                "uuid": "e4034a72c2834434b5b15f96469e97ff",
                                "name": "AWS ECS Cluster Service: [{#AWS.ECS.SERVICE.NAME}]: CPU Utilization",
                                "graph_items": [
                                    {
                                        "drawtype": "GRADIENT_LINE",
                                        "color": "2196F3",
                                        "item": {
                                            "host": "AWS ECS Cluster by HTTP",
                                            "key": "aws.ecs.services.cpu.utilization[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                        }
                                    }
                                ]
                            },
                            {
                                "uuid": "5c5da1e0886740ed80d43597c2b6ee96",
                                "name": "AWS ECS Cluster Service: [{#AWS.ECS.SERVICE.NAME}]: Memory Utilization",
                                "graph_items": [
                                    {
                                        "drawtype": "GRADIENT_LINE",
                                        "color": "2196F3",
                                        "item": {
                                            "host": "AWS ECS Cluster by HTTP",
                                            "key": "aws.ecs.services.memory.utilization[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                        }
                                    }
                                ]
                            },
                            {
                                "uuid": "2057845fb9b641299c7406f1c1127710",
                                "name": "AWS ECS Cluster Service: [{#AWS.ECS.SERVICE.NAME}]: Network",
                                "graph_items": [
                                    {
                                        "color": "199C0D",
                                        "item": {
                                            "host": "AWS ECS Cluster by HTTP",
                                            "key": "aws.ecs.services.network.rx[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                        }
                                    },
                                    {
                                        "sortorder": "1",
                                        "color": "F63100",
                                        "item": {
                                            "host": "AWS ECS Cluster by HTTP",
                                            "key": "aws.ecs.services.network.tx[\"{#AWS.ECS.SERVICE.NAME}\"]"
                                        }
                                    }
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "aws.ecs.get_cluster_services"
                        },
                        "lld_macro_paths": [
                            {
                                "lld_macro": "{#AWS.ECS.SERVICE.NAME}",
                                "path": "$.service_name"
                            }
                        ],
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.services"
                                ]
                            },
                            {
                                "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                "parameters": [
                                    "3h"
                                ]
                            }
                        ]
                    }
                ],
                "tags": [
                    {
                        "tag": "class",
                        "value": "software"
                    },
                    {
                        "tag": "target",
                        "value": "aws"
                    },
                    {
                        "tag": "target",
                        "value": "ecs"
                    }
                ],
                "macros": [
                    {
                        "macro": "{$AWS.ACCESS.KEY.ID}",
                        "description": "Access key ID."
                    },
                    {
                        "macro": "{$AWS.AUTH_TYPE}",
                        "value": "access_key",
                        "description": "Authorization method. Possible values: role_base, access_key."
                    },
                    {
                        "macro": "{$AWS.ECS.CLUSTER.CPU.UTIL.WARN}",
                        "value": "70",
                        "description": "The warning threshold of the cluster CPU utilization expressed in %."
                    },
                    {
                        "macro": "{$AWS.ECS.CLUSTER.MEMORY.UTIL.WARN}",
                        "value": "70",
                        "description": "The warning threshold of the cluster memory utilization expressed in %."
                    },
                    {
                        "macro": "{$AWS.ECS.CLUSTER.NAME}",
                        "description": "ECS cluster name."
                    },
                    {
                        "macro": "{$AWS.ECS.CLUSTER.SERVICE.CPU.UTIL.WARN}",
                        "value": "80",
                        "description": "The warning threshold of the cluster service CPU utilization expressed in %."
                    },
                    {
                        "macro": "{$AWS.ECS.CLUSTER.SERVICE.MEMORY.UTIL.WARN}",
                        "value": "80",
                        "description": "The warning threshold of the cluster service memory utilization expressed in %."
                    },
                    {
                        "macro": "{$AWS.ECS.LLD.FILTER.ALARM_NAME.MATCHES}",
                        "value": ".*",
                        "description": "Filter of discoverable alarms by name."
                    },
                    {
                        "macro": "{$AWS.ECS.LLD.FILTER.ALARM_NAME.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Filter to exclude discovered alarms by name."
                    },
                    {
                        "macro": "{$AWS.ECS.LLD.FILTER.ALARM_SERVICE_NAMESPACE.MATCHES}",
                        "value": ".*",
                        "description": "Filter of discoverable alarms by namespace."
                    },
                    {
                        "macro": "{$AWS.ECS.LLD.FILTER.ALARM_SERVICE_NAMESPACE.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Filter to exclude discovered alarms by namespace."
                    },
                    {
                        "macro": "{$AWS.ECS.LLD.FILTER.SERVICE.MATCHES}",
                        "value": ".*",
                        "description": "Filter of discoverable services by name."
                    },
                    {
                        "macro": "{$AWS.ECS.LLD.FILTER.SERVICE.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Filter to exclude discovered services by name."
                    },
                    {
                        "macro": "{$AWS.PROXY}",
                        "description": "Sets HTTP proxy value. If this macro is empty then no proxy is used."
                    },
                    {
                        "macro": "{$AWS.REGION}",
                        "value": "us-west-1",
                        "description": "Amazon ECS Region code."
                    },
                    {
                        "macro": "{$AWS.SECRET.ACCESS.KEY}",
                        "type": "SECRET_TEXT",
                        "description": "Secret access key."
                    }
                ],
                "dashboards": [
                    {
                        "uuid": "d06afc9b9488445d887659b67d955384",
                        "name": "Overview AWS ECS Cluster",
                        "pages": [
                            {
                                "name": "Cluster",
                                "widgets": [
                                    {
                                        "type": "item",
                                        "name": "Service count",
                                        "width": "24",
                                        "height": "5",
                                        "fields": [
                                            {
                                                "type": "INTEGER",
                                                "name": "decimal_places",
                                                "value": "0"
                                            },
                                            {
                                                "type": "ITEM",
                                                "name": "itemid.0",
                                                "value": {
                                                    "host": "AWS ECS Cluster by HTTP",
                                                    "key": "aws.ecs.service_count"
                                                }
                                            },
                                            {
                                                "type": "INTEGER",
                                                "name": "show.0",
                                                "value": "2"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "graph",
                                        "y": "5",
                                        "width": "72",
                                        "height": "5",
                                        "fields": [
                                            {
                                                "type": "GRAPH",
                                                "name": "graphid.0",
                                                "value": {
                                                    "host": "AWS ECS Cluster by HTTP",
                                                    "name": "AWS ECS Cluster: CPU Utilization"
                                                }
                                            },
                                            {
                                                "type": "STRING",
                                                "name": "reference",
                                                "value": "AAAAC"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "graph",
                                        "y": "10",
                                        "width": "72",
                                        "height": "5",
                                        "fields": [
                                            {
                                                "type": "GRAPH",
                                                "name": "graphid.0",
                                                "value": {
                                                    "host": "AWS ECS Cluster by HTTP",
                                                    "name": "AWS ECS Cluster: Memory Utilization"
                                                }
                                            },
                                            {
                                                "type": "STRING",
                                                "name": "reference",
                                                "value": "AAAAB"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "graph",
                                        "y": "15",
                                        "width": "72",
                                        "height": "5",
                                        "fields": [
                                            {
                                                "type": "GRAPH",
                                                "name": "graphid.0",
                                                "value": {
                                                    "host": "AWS ECS Cluster by HTTP",
                                                    "name": "AWS ECS Cluster: Network"
                                                }
                                            },
                                            {
                                                "type": "STRING",
                                                "name": "reference",
                                                "value": "AAAAA"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "item",
                                        "name": "Task count",
                                        "x": "24",
                                        "width": "24",
                                        "height": "5",
                                        "fields": [
                                            {
                                                "type": "INTEGER",
                                                "name": "decimal_places",
                                                "value": "0"
                                            },
                                            {
                                                "type": "ITEM",
                                                "name": "itemid.0",
                                                "value": {
                                                    "host": "AWS ECS Cluster by HTTP",
                                                    "key": "aws.ecs.task_count"
                                                }
                                            },
                                            {
                                                "type": "INTEGER",
                                                "name": "show.0",
                                                "value": "2"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "item",
                                        "name": "Container instance count",
                                        "x": "48",
                                        "width": "24",
                                        "height": "5",
                                        "fields": [
                                            {
                                                "type": "INTEGER",
                                                "name": "decimal_places",
                                                "value": "0"
                                            },
                                            {
                                                "type": "ITEM",
                                                "name": "itemid.0",
                                                "value": {
                                                    "host": "AWS ECS Cluster by HTTP",
                                                    "key": "aws.ecs.container_instance_count"
                                                }
                                            },
                                            {
                                                "type": "INTEGER",
                                                "name": "show.0",
                                                "value": "2"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "Services",
                                "widgets": [
                                    {
                                        "type": "graphprototype",
                                        "width": "72",
                                        "height": "5",
                                        "fields": [
                                            {
                                                "type": "INTEGER",
                                                "name": "columns",
                                                "value": "1"
                                            },
                                            {
                                                "type": "GRAPH_PROTOTYPE",
                                                "name": "graphid.0",
                                                "value": {
                                                    "host": "AWS ECS Cluster by HTTP",
                                                    "name": "AWS ECS Cluster Service: [{#AWS.ECS.SERVICE.NAME}]: CPU Utilization"
                                                }
                                            },
                                            {
                                                "type": "STRING",
                                                "name": "reference",
                                                "value": "AAAAD"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "graphprototype",
                                        "y": "5",
                                        "width": "72",
                                        "height": "5",
                                        "fields": [
                                            {
                                                "type": "INTEGER",
                                                "name": "columns",
                                                "value": "1"
                                            },
                                            {
                                                "type": "GRAPH_PROTOTYPE",
                                                "name": "graphid.0",
                                                "value": {
                                                    "host": "AWS ECS Cluster by HTTP",
                                                    "name": "AWS ECS Cluster Service: [{#AWS.ECS.SERVICE.NAME}]: Memory Utilization"
                                                }
                                            },
                                            {
                                                "type": "STRING",
                                                "name": "reference",
                                                "value": "AAAAE"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "graphprototype",
                                        "y": "10",
                                        "width": "72",
                                        "height": "5",
                                        "fields": [
                                            {
                                                "type": "INTEGER",
                                                "name": "columns",
                                                "value": "1"
                                            },
                                            {
                                                "type": "GRAPH_PROTOTYPE",
                                                "name": "graphid.0",
                                                "value": {
                                                    "host": "AWS ECS Cluster by HTTP",
                                                    "name": "AWS ECS Cluster Service: [{#AWS.ECS.SERVICE.NAME}]: Network"
                                                }
                                            },
                                            {
                                                "type": "STRING",
                                                "name": "reference",
                                                "value": "AAAAF"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "valuemaps": [
                    {
                        "uuid": "6b0f40b56f1c49f0beb66ffb85009c15",
                        "name": "Alarm state",
                        "mappings": [
                            {
                                "value": "0",
                                "newvalue": "OK"
                            },
                            {
                                "value": "1",
                                "newvalue": "Insufficient data"
                            },
                            {
                                "value": "2",
                                "newvalue": "Alarm"
                            },
                            {
                                "value": "255",
                                "newvalue": "Unknown"
                            }
                        ]
                    },
                    {
                        "uuid": "bb1024c6e5a14c05a8a91ea36aff6d99",
                        "name": "CPU Reserved",
                        "mappings": [
                            {
                                "value": "256",
                                "newvalue": ".25 vCPU"
                            },
                            {
                                "value": "512",
                                "newvalue": ".5 vCPU"
                            },
                            {
                                "value": "1024",
                                "newvalue": "1 vCPU"
                            },
                            {
                                "value": "2048",
                                "newvalue": "2 vCPU"
                            },
                            {
                                "value": "4096",
                                "newvalue": "4 vCPU"
                            },
                            {
                                "value": "8192",
                                "newvalue": "8 vCPU"
                            },
                            {
                                "value": "16384",
                                "newvalue": "16 vCPU"
                            },
                            {
                                "value": "32768",
                                "newvalue": "32 vCPU"
                            }
                        ]
                    }
                ]
            }
        ],
        "graphs": [
            {
                "uuid": "e962b86d53c749b6914c3d50fb8757ff",
                "name": "AWS ECS Cluster: CPU Utilization",
                "graph_items": [
                    {
                        "drawtype": "GRADIENT_LINE",
                        "color": "2196F3",
                        "item": {
                            "host": "AWS ECS Cluster by HTTP",
                            "key": "aws.ecs.cpu_utilization"
                        }
                    }
                ]
            },
            {
                "uuid": "5f9d5878b5954d59bee0ca5d977f3dc7",
                "name": "AWS ECS Cluster: Memory Utilization",
                "graph_items": [
                    {
                        "drawtype": "GRADIENT_LINE",
                        "color": "2196F3",
                        "item": {
                            "host": "AWS ECS Cluster by HTTP",
                            "key": "aws.ecs.memory_utilization"
                        }
                    }
                ]
            },
            {
                "uuid": "503c0a606b1440f4bc02f115196ef9ad",
                "name": "AWS ECS Cluster: Network",
                "graph_items": [
                    {
                        "color": "199C0D",
                        "item": {
                            "host": "AWS ECS Cluster by HTTP",
                            "key": "aws.ecs.network.rx"
                        }
                    },
                    {
                        "sortorder": "1",
                        "color": "F63100",
                        "item": {
                            "host": "AWS ECS Cluster by HTTP",
                            "key": "aws.ecs.network.tx"
                        }
                    }
                ]
            }
        ]
    }
}