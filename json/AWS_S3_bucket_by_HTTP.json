{
    "zabbix_export": {
        "version": "7.0",
        "template_groups": [
            {
                "uuid": "c2c162144c2d4c5491c8801193af4945",
                "name": "Templates/Cloud"
            }
        ],
        "templates": [
            {
                "uuid": "a14ab6b4e80643fe8daa9d7288658f79",
                "template": "AWS S3 bucket by HTTP",
                "name": "AWS S3 bucket by HTTP",
                "description": "The template gets AWS S3 bucket metrics and uses the script item to make HTTP requests to the CloudWatch API.\nDon't forget to read the README.md for the correct setup of the template.\n\nYou can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback\n\nGenerated by official Zabbix template tool \"Templator\"",
                "vendor": {
                    "name": "Zabbix",
                    "version": "7.0-0"
                },
                "groups": [
                    {
                        "name": "Templates/Cloud"
                    }
                ],
                "items": [
                    {
                        "uuid": "7ca108eafb0d4b65a304815ee637174e",
                        "name": "Get alarms check",
                        "type": "DEPENDENT",
                        "key": "aws.s3.alarms.check",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "CHAR",
                        "trends": "0",
                        "description": "Data collection check.",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.error"
                                ],
                                "error_handler": "CUSTOM_VALUE"
                            },
                            {
                                "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                "parameters": [
                                    "3h"
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "aws.s3.get_alarms"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "status"
                            }
                        ],
                        "triggers": [
                            {
                                "uuid": "a8f8a7518aad4e32b23a8611afc8f48c",
                                "expression": "length(last(/AWS S3 bucket by HTTP/aws.s3.alarms.check))>0",
                                "name": "Failed to get alarms data",
                                "opdata": "{ITEM.LASTVALUE1}",
                                "priority": "WARNING",
                                "tags": [
                                    {
                                        "tag": "scope",
                                        "value": "availability"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "fceb9927715443059269fa4589f90f67",
                        "name": "Bucket Size",
                        "type": "DEPENDENT",
                        "key": "aws.s3.bucket_size_bytes",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "FLOAT",
                        "units": "B",
                        "description": "This is a daily metric for the bucket.\nThe amount of data in bytes stored in a bucket in the STANDARD storage class, INTELLIGENT_TIERING storage class, Standard-Infrequent Access (STANDARD_IA) storage class, OneZone-Infrequent Access (ONEZONE_IA), Reduced Redundancy Storage (RRS) class, S3 Glacier Instant Retrieval storage class, Deep Archive Storage (S3 Glacier Deep Archive) class, or S3 Glacier Flexible Retrieval (GLACIER) storage class.\nThis value is calculated by summing the size of all objects and metadata in the bucket (both current and noncurrent objects), including the size of all parts for all incomplete multipart uploads to the bucket.",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.metrics[?(@.Label == \"StandardStorage BucketSizeBytes\")].Values.first().first()"
                                ],
                                "error_handler": "DISCARD_VALUE"
                            }
                        ],
                        "master_item": {
                            "key": "aws.s3.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "storage"
                            }
                        ]
                    },
                    {
                        "uuid": "6da0ea7130e64a7fb8ae32ee02290cbf",
                        "name": "Get alarms data",
                        "type": "SCRIPT",
                        "key": "aws.s3.get_alarms",
                        "delay": "0s;m/1",
                        "history": "0",
                        "value_type": "TEXT",
                        "trends": "0",
                        "params": "var AWS = {\n\tparams: {},\n\tmetadata: 'http://169.254.169.254/latest/meta-data/iam/security-credentials',\n\n\tgetField: function (data, path) {\n\t\tvar steps = path.split('.');\n\t\tfor (var i = 0; i < steps.length; i++) {\n\t\t\tvar step = steps[i];\n\t\t\tif (typeof data !== 'object' || typeof data[step] === 'undefined') {\n\t\t\t\tthrow 'Required field was not found: ' + path;\n\t\t\t}\n\n\t\t\tdata = data[step];\n\t\t}\n\n\t\treturn data;\n\t},\n\n\tsetParams: function (params) {\n\t\tAWS.params['proxy'] = params.proxy;\n\t\tswitch (AWS.getField(params, 'auth_type')) {\n\t\t\tcase 'role_base':\n\t\t\t\tAWS.params['auth_type'] = 'role_base';\n\t\t\t\tvar request = new HttpRequest();\n\t\t\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t\t\t}\n\t\t\t\tvar IamRoleName = request.get(AWS.metadata);\n\n\t\t\t\tif (request.getStatus() !== 200 || IamRoleName === null || IamRoleName === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata. Role not found.';\n\t\t\t\t}\n\n\t\t\t\tcredentials = request.get(AWS.metadata + '/' + encodeURI(IamRoleName));\n\n\t\t\t\tif (request.getStatus() !== 200 || credentials === null || credentials === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata.';\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = JSON.parse(credentials);\n\t\t\t\t}\n\t\t\t\tcatch (error) {\n\t\t\t\t\tthrow 'Failed to parse response received from instance metadata. Check debug log for more information.';\n\t\t\t\t}\n\n\t\t\t\t['AccessKeyId', 'SecretAccessKey', 'Token'].forEach(function (field) {\n\t\t\t\t\tif (typeof credentials !== 'object' || typeof credentials[field] === 'undefined' || credentials[field] === '') {\n\t\t\t\t\t\tthrow 'Required credentials is not set: \"' + field + '\".';\n\t\t\t\t\t};\n\t\t\t\t\tAWS.params[field] = credentials[field];\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'access_key':\n\t\t\tdefault:\n\t\t\t\tAWS.params['auth_type'] = 'access_key';\n\t\t\t\t['AccessKeyId', 'SecretAccessKey'].forEach(function (field) {\n\t\t\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t\t\t}\n\t\t\t\t\tAWS.params[field] = params[field];\n\t\t\t\t});\n\t\t}\n\t\t['bucket_name'].forEach(function (field) {\n\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t}\n\t\t\tAWS.params[field] = params[field];\n\t\t});\n\t},\n\n\tsign: function (key, message) {\n\t\tvar hex = hmac('sha256', key, message);\n\n\t\tif ((hex.length % 2) === 1) {\n\t\t\tthrow 'Invalid length of a hex string!';\n\t\t}\n\n\t\tvar result = new Int8Array(hex.length / 2);\n\t\tfor (var i = 0, b = 0; i < hex.length; i += 2, b++) {\n\t\t\tresult[b] = parseInt(hex.substring(i, i + 2), 16);\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tprepareParams: function (params) {\n\t\tvar result = [];\n\n\t\tObject.keys(params).sort().forEach(function (key) {\n\t\t\tif (typeof params[key] !== 'object') {\n\t\t\t\tresult.push(key + '=' + encodeURIComponent(params[key]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push(prepareObject(key, params[key]));\n\t\t\t}\n\t\t});\n\n\t\treturn result.join('&');\n\t},\n\n\trequest: function (get, method, region, service, params, data, uri) {\n\t\tif (typeof data === 'undefined' || data === null) {\n\t\t\tdata = '';\n\t\t}\n\n\t\tvar amzdate = (new Date()).toISOString().replace(/\\.\\d+Z/, 'Z').replace(/[-:]/g, ''),\n\t\t\tdate = amzdate.replace(/T\\d+Z/, '');\n\t\tif (get === 'alarms') {\n\t\t\thost = service + '.' + region + '.amazonaws.com';\n\t\t} else {\n\t\t\thost = AWS.params.bucket_name + '.' + service + '.' + region + '.amazonaws.com';\n\t\t}\n\t\tif (AWS.params.auth_type === 'role_base') {\n\t\t\tvar canonical_headers = 'content-encoding:amz-1.0\\n' + 'host:' + host + '\\n' + 'x-amz-date:' + amzdate + '\\n' + 'x-amz-security-token:' + AWS.params.Token + '\\n',\n\t\t\t\tsigned_headers = 'content-encoding;host;x-amz-date;x-amz-security-token';\n\t\t} else {\n\t\t\tvar canonical_headers = 'content-encoding:amz-1.0\\n' + 'host:' + host + '\\n' + 'x-amz-date:' + amzdate + '\\n',\n\t\t\t\tsigned_headers = 'content-encoding;host;x-amz-date';\n\t\t}\n\t\tif (get === 'location') {\n\t\t\tcanonical_uri = '/' + uri;\n\t\t} else {\n\t\t\tcanonical_uri = '/';\n\t\t}\n\t\tvar canonical_request = method + '\\n' + canonical_uri + '\\n' + params + '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + sha256(data),\n\t\t\tcredential_scope = date + '/' + region + '/' + service + '/' + 'aws4_request',\n\t\t\trequest_string = 'AWS4-HMAC-SHA256' + '\\n' + amzdate + '\\n' + credential_scope + '\\n' + sha256(canonical_request),\n\t\t\tkey = AWS.sign('AWS4' + AWS.params.SecretAccessKey, date);\n\n\t\tkey = AWS.sign(key, region);\n\t\tkey = AWS.sign(key, service);\n\t\tkey = AWS.sign(key, 'aws4_request');\n\n\t\tvar request = new HttpRequest(),\n\t\t\turl = 'https://' + host + canonical_uri + '?' + params;\n\n\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t}\n\t\trequest.addHeader('x-amz-date: ' + amzdate);\n\t\trequest.addHeader('Accept: application/json');\n\t\trequest.addHeader('Content-Type: application/json');\n\t\trequest.addHeader('Content-Encoding: amz-1.0');\n\t\trequest.addHeader('x-amz-content-sha256:' + sha256(data));\n\t\trequest.addHeader('Authorization: ' + 'AWS4-HMAC-SHA256 Credential=' + AWS.params.AccessKeyId + '/' + credential_scope + ', ' + 'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + hmac('sha256', key, request_string));\n\t\tif (AWS.params.auth_type === 'role_base')\n\t\t\trequest.addHeader('X-Amz-Security-Token: ' + AWS.params.Token);\n\n\t\tZabbix.log(4, '[ AWS S3 ] Sending request: ' + url);\n\n\t\tresponse = request.get(url);\n\n\t\tZabbix.log(4, '[ AWS S3 ] Received response with status code ' + request.getStatus() + ': ' + response);\n\n\t\tif (request.getStatus() !== 200) {\n\t\t\tthrow 'Request failed with status code ' + request.getStatus() + ': ' + response;\n\t\t}\n\n\t\tif (response[0] === '<') {\n\t\t\ttry {\n\t\t\t\tresponse = XML.toJson(response);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tthrow 'Failed to parse response received from AWS CloudWatch API. Check debug log for more information.';\n\t\t\t}\n\t\t}\n\n\t\tif (response !== null) {\n\t\t\ttry {\n\t\t\t\tresponse = JSON.parse(response);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tthrow 'Failed to parse response received from AWS CloudWatch API. Check debug log for more information.';\n\t\t\t}\n\t\t}\n\n\t\treturn response;\n\t},\n\n\tgetBucketLocation: function (bucket_name) {\n\t\tvar payload = {};\n\t\tpayload['location'] = '';\n\n\t\tresult = AWS.request('location', 'GET', 'us-east-1', 's3', AWS.prepareParams(payload), '', bucket_name);\n\n\t\tif (typeof result !== 'object'\n\t\t\t|| result.hasOwnProperty('LocationConstraint') === false\n\t\t) {\n\t\t\tthrow 'Cannot get buckets region location data from AWS S3 API. Check debug log for more information.';\n\t\t}\n\n\t\treturn result.LocationConstraint !== null ? result.LocationConstraint : 'us-east-1';\n\t},\n\n\tgetAlarms: function (region) {\n\t\tvar payload = {\n\t\t\t'Action': 'DescribeAlarms',\n\t\t\t'Version': '2010-08-01',\n\t\t\t'MaxRecords': 100\n\t\t},\n\t\t\tresult = [];\n\n\t\twhile (payload.NextToken !== '') {\n\t\t\tvar alarms = AWS.getField(AWS.request('alarms', 'GET', region, 'monitoring', AWS.prepareParams(payload)), 'DescribeAlarmsResponse.DescribeAlarmsResult');\n\t\t\tpayload.NextToken = alarms.NextToken || '';\n\t\t\talarms_list = AWS.getField(alarms, 'MetricAlarms');\n\n\t\t\tif (!Array.isArray(alarms_list))\n\t\t\t\talarms_list = [alarms_list]\n\t\t\talarms_list.forEach(function (alarm) {\n\t\t\t\tvar dimensions = alarm.Dimensions;\n\n\t\t\t\tif (Array.isArray(alarm.Metrics)) {\n\t\t\t\t\talarm.Metrics.forEach(function (metric) {\n\t\t\t\t\t\tif (typeof metric.MetricStat === 'object' && metric.MetricStat !== null\n\t\t\t\t\t\t\t&& typeof metric.MetricStat.Metric === 'object' && metric.MetricStat.Metric !== null\n\t\t\t\t\t\t\t&& Array.isArray(metric.MetricStat.Metric.Dimensions)) {\n\t\t\t\t\t\t\tdimensions = dimensions.concat(metric.MetricStat.Metric.Dimensions);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tfor (var i in dimensions) {\n\t\t\t\t\tif (dimensions[i].Name === 'BucketName' && dimensions[i].Value === AWS.params.bucket_name) {\n\t\t\t\t\t\tresult.push(alarm);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\ntry {\n\tAWS.setParams(JSON.parse(value));\n\tvar region = AWS.getBucketLocation(AWS.params.bucket_name);\n\treturn JSON.stringify(AWS.getAlarms(region));\n}\ncatch (error) {\n\terror += (String(error).endsWith('.')) ? '' : '.';\n\tZabbix.log(3, '[ AWS S3 ] ERROR: ' + error);\n\n\treturn JSON.stringify({ 'error': error });\n}",
                        "description": "Get alarms data.\nDescribeAlarms API method: https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html",
                        "preprocessing": [
                            {
                                "type": "CHECK_NOT_SUPPORTED",
                                "parameters": [
                                    "-1"
                                ]
                            }
                        ],
                        "timeout": "15s",
                        "parameters": [
                            {
                                "name": "AccessKeyId",
                                "value": "{$AWS.ACCESS.KEY.ID}"
                            },
                            {
                                "name": "auth_type",
                                "value": "{$AWS.AUTH_TYPE}"
                            },
                            {
                                "name": "bucket_name",
                                "value": "{$AWS.S3.BUCKET.NAME}"
                            },
                            {
                                "name": "proxy",
                                "value": "{$AWS.PROXY}"
                            },
                            {
                                "name": "region",
                                "value": "{$AWS.REGION}"
                            },
                            {
                                "name": "SecretAccessKey",
                                "value": "{$AWS.SECRET.ACCESS.KEY}"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "component",
                                "value": "raw"
                            }
                        ]
                    },
                    {
                        "uuid": "598e9dc563334ad6b1d72245a6f8679f",
                        "name": "Get metrics data",
                        "type": "SCRIPT",
                        "key": "aws.s3.get_metrics",
                        "delay": "0s;h/8",
                        "history": "0",
                        "value_type": "TEXT",
                        "trends": "0",
                        "params": "var AWS = {\n\tparams: {},\n\trequest_period: 2 * 86400,\n\tmetadata: 'http://169.254.169.254/latest/meta-data/iam/security-credentials',\n\n\tgetField: function (data, path) {\n\t\tvar steps = path.split('.');\n\t\tfor (var i = 0; i < steps.length; i++) {\n\t\t\tvar step = steps[i];\n\t\t\tif (typeof data !== 'object' || typeof data[step] === 'undefined') {\n\t\t\t\tthrow 'Required field was not found: ' + path;\n\t\t\t}\n\n\t\t\tdata = data[step];\n\t\t}\n\n\t\treturn data;\n\t},\n\n\tsetParams: function (params) {\n\t\tAWS.params['proxy'] = params.proxy;\n\t\tswitch (AWS.getField(params, 'auth_type')) {\n\t\t\tcase 'role_base':\n\t\t\t\tAWS.params['auth_type'] = 'role_base';\n\t\t\t\tvar request = new HttpRequest();\n\t\t\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t\t\t}\n\t\t\t\tvar IamRoleName = request.get(AWS.metadata);\n\n\t\t\t\tif (request.getStatus() !== 200 || IamRoleName === null || IamRoleName === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata. Role not found.';\n\t\t\t\t}\n\n\t\t\t\tcredentials = request.get(AWS.metadata + '/' + encodeURI(IamRoleName));\n\n\t\t\t\tif (request.getStatus() !== 200 || credentials === null || credentials === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata.';\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = JSON.parse(credentials);\n\t\t\t\t}\n\t\t\t\tcatch (error) {\n\t\t\t\t\tthrow 'Failed to parse response received from instance metadata. Check debug log for more information.';\n\t\t\t\t}\n\n\t\t\t\t['AccessKeyId', 'SecretAccessKey', 'Token'].forEach(function (field) {\n\t\t\t\t\tif (typeof credentials !== 'object' || typeof credentials[field] === 'undefined' || credentials[field] === '') {\n\t\t\t\t\t\tthrow 'Required credentials are not set: \"' + field + '\".';\n\t\t\t\t\t};\n\t\t\t\t\tAWS.params[field] = credentials[field];\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'access_key':\n\t\t\tdefault:\n\t\t\t\tAWS.params['auth_type'] = 'access_key';\n\t\t\t\t['AccessKeyId', 'SecretAccessKey'].forEach(function (field) {\n\t\t\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t\t\t}\n\t\t\t\t\tAWS.params[field] = params[field];\n\t\t\t\t});\n\t\t}\n\t\t['bucket_name'].forEach(function (field) {\n\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t}\n\n\t\t\tAWS.params[field] = params[field];\n\t\t});\n\t},\n\n\tsign: function (key, message) {\n\t\tvar hex = hmac('sha256', key, message);\n\n\t\tif ((hex.length % 2) === 1) {\n\t\t\tthrow 'Invalid length of a hex string!';\n\t\t}\n\n\t\tvar result = new Int8Array(hex.length / 2);\n\t\tfor (var i = 0, b = 0; i < hex.length; i += 2, b++) {\n\t\t\tresult[b] = parseInt(hex.substring(i, i + 2), 16);\n\t\t}\n\n\t\treturn result;\n\t},\n\n\trenderMetricQuery: function (period, bucket_name) {\n\t\tvar metrics_list = [\n\t\t\t'BucketSizeBytes:Bytes:Average:StandardStorage',\n\t\t\t'NumberOfObjects:Count:Average:AllStorageTypes',\n\t\t];\n\n\t\tvar metric_payload = [];\n\t\tmetrics_list.forEach(function (metric, index) {\n\t\t\tvar parts = metric.split(':', 4);\n\t\t\tmetric_payload.push({\n\t\t\t\t'Id': 'm' + index,\n\t\t\t\t'MetricStat': {\n\t\t\t\t\t'Metric': {\n\t\t\t\t\t\t'MetricName': parts[0],\n\t\t\t\t\t\t'Namespace': 'AWS/S3',\n\t\t\t\t\t\t'Dimensions': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'Name': 'BucketName',\n\t\t\t\t\t\t\t\t'Value': bucket_name\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'Name': 'StorageType',\n\t\t\t\t\t\t\t\t'Value': parts[3]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t'Period': period,\n\t\t\t\t\t'Stat': parts[2],\n\t\t\t\t\t'Unit': parts[1]\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn metric_payload;\n\n\t},\n\n\tprepareParams: function (params) {\n\t\tvar result = [];\n\n\t\tObject.keys(params).sort().forEach(function (key) {\n\t\t\tif (typeof params[key] !== 'object') {\n\t\t\t\tresult.push(key + '=' + encodeURIComponent(params[key]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push(prepareObject(key, params[key]));\n\t\t\t}\n\t\t});\n\n\t\treturn result.join('&');\n\t},\n\n\trequest: function (get, method, region, service, params, data, uri) {\n\t\tif (typeof data === 'undefined' || data === null) {\n\t\t\tdata = '';\n\t\t}\n\t\telse {\n\t\t\tdata = JSON.stringify(data)\n\t\t}\n\t\tvar amzdate = (new Date()).toISOString().replace(/\\.\\d+Z/, 'Z').replace(/[-:]/g, ''),\n\t\t\tdate = amzdate.replace(/T\\d+Z/, '');\n\t\tif (get === 'metrics') {\n\t\t\thost = service + '.' + region + '.amazonaws.com';\n\t\t} else {\n\t\t\thost = AWS.params.bucket_name + '.' + service + '.' + region + '.amazonaws.com';\n\t\t}\n\n\t\tif (AWS.params.auth_type === 'role_base') {\n\t\t\tvar canonical_headers = 'content-encoding:amz-1.0\\n' + 'host:' + host + '\\n' + 'x-amz-date:' + amzdate + '\\n' + 'x-amz-security-token:' + AWS.params.Token + '\\n',\n\t\t\t\tsigned_headers = 'content-encoding;host;x-amz-date;x-amz-security-token';\n\t\t} else {\n\t\t\tvar canonical_headers = 'content-encoding:amz-1.0\\n' + 'host:' + host + '\\n' + 'x-amz-date:' + amzdate + '\\n',\n\t\t\t\tsigned_headers = 'content-encoding;host;x-amz-date';\n\t\t}\n\n\t\tvar canonical_uri = '/';\n\n\t\tswitch (get) {\n\t\t\tcase 'location':\n\t\t\t\tcanonical_uri = '/' + uri;\n\t\t\t\tcanonical_request = method + '\\n' + canonical_uri + '\\n' + params + '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + sha256(data),\n\t\t\t\t\turl = 'https://' + host + canonical_uri + '?' + params;\n\t\t\t\tbreak;\n\t\t\tcase 'metrics':\n\t\t\t\tcanonical_request = method + '\\n' + canonical_uri + '\\n' + '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + sha256(data),\n\t\t\t\t\turl = 'https://' + host + canonical_uri;\n\t\t\t\tbreak;\n\t\t\tcase 'filter_id':\n\t\t\t\tcanonical_request = method + '\\n' + canonical_uri + '\\n' + params + '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + sha256(data),\n\t\t\t\t\turl = 'https://' + host + canonical_uri + '?' + params;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow 'Error: Invalid option \"get\" for request function';\n\t\t}\n\n\t\tvar credential_scope = date + '/' + region + '/' + service + '/' + 'aws4_request',\n\t\t\trequest_string = 'AWS4-HMAC-SHA256' + '\\n' + amzdate + '\\n' + credential_scope + '\\n' + sha256(canonical_request),\n\t\t\tkey = AWS.sign('AWS4' + AWS.params.SecretAccessKey, date);\n\n\t\tkey = AWS.sign(key, region);\n\t\tkey = AWS.sign(key, service);\n\t\tkey = AWS.sign(key, 'aws4_request');\n\t\tvar request = new HttpRequest();\n\n\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t}\n\t\trequest.addHeader('x-amz-date: ' + amzdate);\n\t\trequest.addHeader('x-amz-content-sha256:' + sha256(data));\n\t\trequest.addHeader('Accept: application/json');\n\t\trequest.addHeader('Content-Type: application/json');\n\t\trequest.addHeader('Content-Encoding: amz-1.0');\n\t\trequest.addHeader('Authorization: ' + 'AWS4-HMAC-SHA256 Credential=' + AWS.params.AccessKeyId + '/' + credential_scope + ', ' + 'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + hmac('sha256', key, request_string));\n\t\tif (AWS.params.auth_type === 'role_base')\n\t\t\trequest.addHeader('X-Amz-Security-Token: ' + AWS.params.Token);\n\n\t\tswitch (get) {\n\t\t\tcase 'location':\n\t\t\tcase 'filter_id':\n\t\t\t\turl = 'https://' + host + canonical_uri + '?' + params;\n\t\t\t\tZabbix.log(4, '[ AWS S3 ] Sending request: ' + url);\n\t\t\t\tresponse = request.get(url);\n\t\t\t\tZabbix.log(4, '[ AWS S3 ] Received response with status code ' + request.getStatus() + ': ' + response);\n\t\t\t\tif (request.getStatus() !== 200) {\n\t\t\t\t\tthrow 'Request failed with status code ' + request.getStatus() + ': ' + response;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tresponse = XML.toJson(response);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthrow 'Failed to parse response received from AWS CloudWatch API. Check debug log for more information.';\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'metrics':\n\t\t\t\turl = 'https://' + host + '/';\n\t\t\t\tZabbix.log(4, '[ AWS S3 ] Sending request: ' + url);\n\t\t\t\trequest.addHeader('X-Amz-Target: GraniteServiceVersion20100801.GetMetricData');\n\t\t\t\tresponse = request.post(url, data);\n\t\t\t\tZabbix.log(4, '[ AWS S3 ] Received response with status code ' + request.getStatus() + ': ' + response);\n\t\t\t\tif (request.getStatus() !== 200) {\n\t\t\t\t\tthrow 'Request failed with status code ' + request.getStatus() + ': ' + response;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow 'Error: Invalid option \"get\" for request function';\n\t\t}\n\n\t\treturn JSON.parse(response);\n\t},\n\n\tgetBucketLocation: function (bucket_name) {\n\t\tvar payload = {};\n\t\tpayload['location'] = '';\n\n\t\tresult = AWS.request('location', 'GET', 'us-east-1', 's3', AWS.prepareParams(payload), '', bucket_name);\n\n\t\tif (typeof result !== 'object'\n\t\t\t|| result.hasOwnProperty('LocationConstraint') === false\n\t\t) {\n\t\t\tthrow 'Cannot get buckets region location data from AWS S3 API. Check debug log for more information.';\n\t\t}\n\n\t\treturn result.LocationConstraint !== null ? result.LocationConstraint : 'us-east-1';\n\t},\n\n\tgetBucketFilterId: function (bucket_name, region) {\n\t\tvar payload = {};\n\t\tpayload['metrics'] = '';\n\n\t\tdata = AWS.getField(AWS.request('filter_id', 'GET', region, 's3', AWS.prepareParams(payload), '', bucket_name), 'ListMetricsConfigurationsResult');\n\n\t\tif (typeof data === 'object' && data.hasOwnProperty('MetricsConfiguration') === true) {\n\t\t\tif (!Array.isArray(data.MetricsConfiguration))\n\t\t\t\tdata.MetricsConfiguration = [data.MetricsConfiguration]\n\t\t\tdata.MetricsConfiguration.forEach(function (item) {\n\t\t\t\titem.region = region;\n\t\t\t});\n\t\t} else { data = ['To view request metrics, create a filter'] }\n\t\treturn data.MetricsConfiguration;\n\n\t},\n\n\tgetMetricsData: function (region) {\n\t\tvar payload = {},\n\t\t\tend_time = Math.floor((new Date().getTime()) / 1000),\n\t\t\tstart_time = end_time - AWS.request_period;\n\t\tpayload['StartTime'] = start_time;\n\t\tpayload['EndTime'] = end_time;\n\t\tpayload['ScanBy'] = 'TimestampDescending';\n\t\tpayload['MetricDataQueries'] = AWS.renderMetricQuery(43200, AWS.params.bucket_name);\n\n\t\treturn AWS.getField(AWS.request('metrics', 'POST', region, 'monitoring', '', payload), 'MetricDataResults');\n\t}\n\n};\n\ntry {\n\tAWS.setParams(JSON.parse(value));\n\tvar region = AWS.getBucketLocation(AWS.params.bucket_name),\n\t\tmetrics = AWS.getMetricsData(region),\n\t\tfilter_id = AWS.getBucketFilterId(AWS.params.bucket_name, region);\n\treturn JSON.stringify({ metrics, filter_id });\n}\ncatch (error) {\n\terror += (String(error).endsWith('.')) ? '' : '.';\n\tZabbix.log(3, '[ AWS S3 ] ERROR: ' + error);\n\n\treturn JSON.stringify({ 'error': error });\n}",
                        "description": "Get bucket metrics.\nFull metrics list related to S3: https://docs.aws.amazon.com/AmazonS3/latest/userguide/metrics-dimensions.html",
                        "preprocessing": [
                            {
                                "type": "CHECK_NOT_SUPPORTED",
                                "parameters": [
                                    "-1"
                                ]
                            }
                        ],
                        "timeout": "15s",
                        "parameters": [
                            {
                                "name": "AccessKeyId",
                                "value": "{$AWS.ACCESS.KEY.ID}"
                            },
                            {
                                "name": "auth_type",
                                "value": "{$AWS.AUTH_TYPE}"
                            },
                            {
                                "name": "bucket_name",
                                "value": "{$AWS.S3.BUCKET.NAME}"
                            },
                            {
                                "name": "proxy",
                                "value": "{$AWS.PROXY}"
                            },
                            {
                                "name": "SecretAccessKey",
                                "value": "{$AWS.SECRET.ACCESS.KEY}"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "component",
                                "value": "raw"
                            }
                        ]
                    },
                    {
                        "uuid": "0e22c196ae834d2899068f25316ffed2",
                        "name": "Get metrics check",
                        "type": "DEPENDENT",
                        "key": "aws.s3.metrics.check",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "CHAR",
                        "trends": "0",
                        "description": "Data collection check.",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.error"
                                ],
                                "error_handler": "CUSTOM_VALUE"
                            },
                            {
                                "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                "parameters": [
                                    "3h"
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "aws.s3.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "status"
                            }
                        ],
                        "triggers": [
                            {
                                "uuid": "a8a0b4187f5f4e22b868dd038f53a2ba",
                                "expression": "length(last(/AWS S3 bucket by HTTP/aws.s3.metrics.check))>0",
                                "name": "Failed to get metrics data",
                                "opdata": "{ITEM.LASTVALUE1}",
                                "priority": "WARNING",
                                "tags": [
                                    {
                                        "tag": "scope",
                                        "value": "availability"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "75b467e2079c41c5b3e8f79df8c5a9ba",
                        "name": "Number of objects",
                        "type": "DEPENDENT",
                        "key": "aws.s3.number_of_objects",
                        "delay": "0",
                        "history": "7d",
                        "value_type": "FLOAT",
                        "description": "This is a daily metric for the bucket.\nThe total number of objects stored in a bucket for all storage classes.\nThis value is calculated by counting all objects in the bucket (both current and noncurrent objects) and the total number of parts for all incomplete multipart uploads to the bucket.",
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.metrics.[?(@.Label == \"AllStorageTypes NumberOfObjects\")].Values.first().first()"
                                ],
                                "error_handler": "DISCARD_VALUE"
                            }
                        ],
                        "master_item": {
                            "key": "aws.s3.get_metrics"
                        },
                        "tags": [
                            {
                                "tag": "component",
                                "value": "storage"
                            }
                        ]
                    }
                ],
                "discovery_rules": [
                    {
                        "uuid": "26c424a60a7a4975996ccc44601c4ee3",
                        "name": "Bucket Alarms discovery",
                        "type": "DEPENDENT",
                        "key": "aws.s3.alarms.discovery",
                        "delay": "0",
                        "filter": {
                            "evaltype": "AND",
                            "conditions": [
                                {
                                    "macro": "{#ALARM_NAME}",
                                    "value": "{$AWS.S3.LLD.FILTER.ALARM_NAME.MATCHES}",
                                    "formulaid": "A"
                                },
                                {
                                    "macro": "{#ALARM_NAME}",
                                    "value": "{$AWS.S3.LLD.FILTER.ALARM_NAME.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "B"
                                }
                            ]
                        },
                        "description": "Discovery of bucket alarms.",
                        "item_prototypes": [
                            {
                                "uuid": "b38bd6e4566445acb52e8ecce4014f0f",
                                "name": "[{#ALARM_NAME}]: State",
                                "type": "DEPENDENT",
                                "key": "aws.s3.alarm.state[\"{#ALARM_NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "description": "The state value for the alarm. Possible values: 0 (OK), 1 (INSUFFICIENT_DATA), 2 (ALARM).\nAlarm description:\n{#ALARM_DESCRIPTION}",
                                "valuemap": {
                                    "name": "Alarm state"
                                },
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.AlarmName == \"{#ALARM_NAME}\")].StateValue.first()"
                                        ],
                                        "error_handler": "CUSTOM_VALUE",
                                        "error_handler_params": "3"
                                    },
                                    {
                                        "type": "JAVASCRIPT",
                                        "parameters": [
                                            "var state = ['OK', 'INSUFFICIENT_DATA', 'ALARM'];\n\nreturn state.indexOf(value.trim()) === -1 ? 255 : state.indexOf(value.trim());"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_alarms"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "alarms"
                                    }
                                ],
                                "trigger_prototypes": [
                                    {
                                        "uuid": "7f0ba96047784510b734c0064d434edc",
                                        "expression": "last(/AWS S3 bucket by HTTP/aws.s3.alarm.state[\"{#ALARM_NAME}\"])=1",
                                        "name": "[{#ALARM_NAME}] has 'Insufficient data' state",
                                        "priority": "INFO",
                                        "tags": [
                                            {
                                                "tag": "scope",
                                                "value": "notice"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "uuid": "7e536a43faf742058d303ffe21cd9a8c",
                                "name": "[{#ALARM_NAME}]: State reason",
                                "type": "DEPENDENT",
                                "key": "aws.s3.alarm.state_reason[\"{#ALARM_NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "TEXT",
                                "trends": "0",
                                "description": "An explanation for the alarm state, in text format.\nAlarm description:\n{#ALARM_DESCRIPTION}",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.AlarmName == \"{#ALARM_NAME}\")].StateReason.first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    },
                                    {
                                        "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                        "parameters": [
                                            "3h"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_alarms"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "alarms"
                                    }
                                ]
                            }
                        ],
                        "trigger_prototypes": [
                            {
                                "uuid": "c1b94199b7ac4cc9889ff0e724f7057d",
                                "expression": "last(/AWS S3 bucket by HTTP/aws.s3.alarm.state[\"{#ALARM_NAME}\"])=2 and length(last(/AWS S3 bucket by HTTP/aws.s3.alarm.state_reason[\"{#ALARM_NAME}\"]))>0",
                                "name": "[{#ALARM_NAME}] has 'Alarm' state",
                                "priority": "AVERAGE",
                                "description": "Alarm \"{#ALARM_NAME}\" has 'Alarm' state. \nReason: {ITEM.LASTVALUE2}",
                                "tags": [
                                    {
                                        "tag": "scope",
                                        "value": "availability"
                                    }
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "aws.s3.get_alarms"
                        },
                        "preprocessing": [
                            {
                                "type": "JAVASCRIPT",
                                "parameters": [
                                    "var result = [];\nvar alarms = JSON.parse(value);\n\nalarms.forEach(function(alarm) {\n\n result.push({\n'{#ALARM_DESCRIPTION}': alarm.AlarmDescription !== null ? alarm.AlarmDescription : 'None' ,\n'{#ALARM_NAME}': alarm.AlarmName,\n'{#ALARM_PERIOD}': alarm.Period,\n'{#METRIC_NAME}': alarm.MetricName\n  });\n});\n\nreturn JSON.stringify(result);"
                                ]
                            },
                            {
                                "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                "parameters": [
                                    "3h"
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "9ff609d143ae4552b395668718c43191",
                        "name": "Request Metrics discovery",
                        "type": "DEPENDENT",
                        "key": "aws.s3.configuration.discovery",
                        "delay": "0",
                        "filter": {
                            "evaltype": "AND",
                            "conditions": [
                                {
                                    "macro": "{#AWS.S3.FILTER.ID.NAME}",
                                    "value": "{$AWS.S3.LLD.FILTER.ID.NAME.MATCHES}",
                                    "formulaid": "A"
                                },
                                {
                                    "macro": "{#AWS.S3.FILTER.ID.NAME}",
                                    "value": "{$AWS.S3.LLD.FILTER.ID.NAME.NOT_MATCHES}",
                                    "operator": "NOT_MATCHES_REGEX",
                                    "formulaid": "B"
                                }
                            ]
                        },
                        "description": "Discovery of request metrics.",
                        "item_prototypes": [
                            {
                                "uuid": "7c746594159f4f1c94e8790ed1bdf2af",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Errors, 4xx",
                                "type": "DEPENDENT",
                                "key": "aws.s3.4xx_errors[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of HTTP 4xx client error status code requests made to an Amazon S3 bucket with a value of either 0 or 1.\nThe average statistic shows the error rate, and the sum statistic shows the count of that type of error, during each period.\nStatistic: Average (reports per request).",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"4xxErrors\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "errors"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "806de74ed57b4797b294ebe8fa509429",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Errors, 5xx",
                                "type": "DEPENDENT",
                                "key": "aws.s3.5xx_errors[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of HTTP 5xx server error status code requests made to an Amazon S3 bucket with a value of either 0 or 1.\nThe average statistic shows the error rate, and the sum statistic shows the count of that type of error, during each period.\nStatistic: Average (reports per request).",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"5xxErrors\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "errors"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "7530d7ebe61942f4abc29a8ccb3b5516",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: All",
                                "type": "DEPENDENT",
                                "key": "aws.s3.all_requests[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The total number of HTTP requests made to an Amazon S3 bucket, regardless of type.\nIf you're using a metrics configuration with a filter, then this metric only returns the HTTP requests that meet the filter's requirements.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"AllRequests\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    }
                                ]
                            },
                            {
                                "uuid": "8758c16faef9477d8e3ff41426c2761b",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Bytes downloaded",
                                "type": "DEPENDENT",
                                "key": "aws.s3.bytes_downloaded[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "B",
                                "description": "The number of bytes downloaded for requests made to an Amazon S3 bucket, where the response includes a body.\nStatistic: Average (bytes per request).",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"BytesDownloaded\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "3f5141a7448b43d288a37dfe41a52288",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Replication: Bytes pending",
                                "type": "DEPENDENT",
                                "key": "aws.s3.bytes_pending_replication[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "B",
                                "description": "The total number of bytes of objects pending replication for a given replication rule.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"BytesPendingReplication\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "replication"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "99eefab6b9be405ead0e6ea57394a7e3",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Bytes uploaded",
                                "type": "DEPENDENT",
                                "key": "aws.s3.bytes_uploaded[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "B",
                                "description": "The number of bytes uploaded that contain a request body, made to an Amazon S3 bucket.\nStatistic: Average (bytes per request).",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"BytesUploaded\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "d9deb58254be4add996d3dec97344132",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Delete",
                                "type": "DEPENDENT",
                                "key": "aws.s3.delete_requests[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of HTTP DELETE requests made for objects in an Amazon S3 bucket.\nThis also includes Delete Multiple Objects requests. This metric shows the number of requests, not the number of objects deleted.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"DeleteRequests\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "d8c8e91f383747e5b6e73f922f5b3278",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: First byte latency, avg",
                                "type": "DEPENDENT",
                                "key": "aws.s3.first_byte_latency.avg[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "ms",
                                "description": "The per-request time from the complete request being received by an Amazon S3 bucket to when the response starts to be returned.\nStatistic: Average.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"FirstByteLatency\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "latency"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "55cb2316171e43a0aa94e0d203832577",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: First byte latency, p90",
                                "type": "DEPENDENT",
                                "key": "aws.s3.first_byte_latency.p90[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "ms",
                                "description": "The per-request time from the complete request being received by an Amazon S3 bucket to when the response starts to be returned.\nStatistic: 90th percentile.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"FirstByteLatency\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "latency"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "eabbd51547cb4a0484182d42601728c3",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Get request metrics",
                                "type": "SCRIPT",
                                "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "{$AWS.S3.UPDATE.INTERVAL}",
                                "history": "0",
                                "value_type": "TEXT",
                                "trends": "0",
                                "params": "var AWS = {\n\tparams: {},\n\tmetadata: 'http://169.254.169.254/latest/meta-data/iam/security-credentials',\n\n\tgetField: function (data, path) {\n\t\tvar steps = path.split('.');\n\t\tfor (var i = 0; i < steps.length; i++) {\n\t\t\tvar step = steps[i];\n\t\t\tif (typeof data !== 'object' || typeof data[step] === 'undefined') {\n\t\t\t\tthrow 'Required field was not found: ' + path;\n\t\t\t}\n\n\t\t\tdata = data[step];\n\t\t}\n\n\t\treturn data;\n\t},\n\n\tisFloat: function (n) {\n\t\tn = parseFloat(n);\n\t\treturn Number(n) === n && n % 1 !== 0;\n\t},\n\n\tcheckNumber: function checkNumber(string) {\n\t\tif (typeof string !== \"string\" || isNaN(string) || AWS.isFloat(string)) {\n\t\t\tthrow 'Incorrect \"timespan\" parameter given: ' + string + ' Must be an unsigned number';\n\t\t}\n\t\treturn string;\n\t},\n\n\tsetParams: function (params) {\n\t\tswitch (AWS.getField(params, 'auth_type')) {\n\t\t\tcase 'role_base':\n\t\t\t\tAWS.params['auth_type'] = 'role_base';\n\t\t\t\tvar request = new HttpRequest(),\n\t\t\t\t\tIamRoleName = request.get(AWS.metadata);\n\n\t\t\t\tif (request.getStatus() !== 200 || IamRoleName === null || IamRoleName === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata. Role not found.';\n\t\t\t\t}\n\n\t\t\t\tcredentials = request.get(AWS.metadata + '/' + encodeURI(IamRoleName));\n\n\t\t\t\tif (request.getStatus() !== 200 || credentials === null || credentials === '') {\n\t\t\t\t\tthrow 'Error getting security credentials from instance metadata.';\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = JSON.parse(credentials);\n\t\t\t\t}\n\t\t\t\tcatch (error) {\n\t\t\t\t\tthrow 'Failed to parse response received from instance metadata. Check debug log for more information.';\n\t\t\t\t}\n\n\t\t\t\t['AccessKeyId', 'SecretAccessKey', 'Token'].forEach(function (field) {\n\t\t\t\t\tif (typeof credentials !== 'object' || typeof credentials[field] === 'undefined' || credentials[field] === '') {\n\t\t\t\t\t\tthrow 'Required credentials are not set: \"' + field + '\".';\n\t\t\t\t\t};\n\t\t\t\t\tAWS.params[field] = credentials[field];\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'access_key':\n\t\t\tdefault:\n\t\t\t\tAWS.params['auth_type'] = 'access_key';\n\t\t\t\t['AccessKeyId', 'SecretAccessKey'].forEach(function (field) {\n\t\t\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t\t\t}\n\t\t\t\t\tAWS.params[field] = params[field];\n\t\t\t\t});\n\t\t}\n\t\t['region', 'bucket_name', 'filter_id'].forEach(function (field) {\n\t\t\tif (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n\t\t\t\tthrow 'Required param is not set: \"' + field + '\".';\n\t\t\t}\n\t\t\tAWS.params[field] = params[field];\n\t\t});\n\n\t\tupdateInterval = AWS.checkNumber('{$AWS.S3.UPDATE.INTERVAL}');\n\n\t\tif (updateInterval > 86400 || updateInterval < 1) {\n\t\t\tthrow 'Incorrect \"update interval\" parameter given: ' + updateInterval + ' Must be between 1 and 86400 seconds.';\n\t\t}\n\t},\n\n\tsign: function (key, message) {\n\t\tvar hex = hmac('sha256', key, message);\n\n\t\tif ((hex.length % 2) === 1) {\n\t\t\tthrow 'Invalid length of a hex string!';\n\t\t}\n\n\t\tvar result = new Int8Array(hex.length / 2);\n\t\tfor (var i = 0, b = 0; i < hex.length; i += 2, b++) {\n\t\t\tresult[b] = parseInt(hex.substring(i, i + 2), 16);\n\t\t}\n\n\t\treturn result;\n\t},\n\n\trenderMetricQuery: function (period, bucket_name, filter_id) {\n\t\tvar metrics_list = [\n\t\t\t'AllRequests:Count:Sum',\n\t\t\t'GetRequests:Count:Sum',\n\t\t\t'PutRequests:Count:Sum',\n\t\t\t'DeleteRequests:Count:Sum',\n\t\t\t'HeadRequests:Count:Sum',\n\t\t\t'PostRequests:Count:Sum',\n\t\t\t'SelectRequests:Count:Sum',\n\t\t\t'SelectBytesScanned:Bytes:Average',\n\t\t\t'SelectBytesReturned:Bytes:Average',\n\t\t\t'ListRequests:Count:Sum',\n\t\t\t'BytesDownloaded:Bytes:Average',\n\t\t\t'BytesUploaded:Bytes:Average',\n\t\t\t'4xxErrors:Count:Average',\n\t\t\t'5xxErrors:Count:Average',\n\t\t\t'TotalRequestLatency:Milliseconds:p90',\n\t\t\t'FirstByteLatency:Milliseconds:p90',\n\t\t\t'ReplicationLatency:Seconds:Average',\n\t\t\t'BytesPendingReplication:Bytes:Average',\n\t\t\t'OperationsPendingReplication:Count:Average',\n\n\t\t];\n\n\t\tvar metric_payload = [];\n\t\tmetrics_list.forEach(function (metric, index) {\n\t\t\tvar parts = metric.split(':', 3);\n\t\t\tmetric_payload.push({\n\t\t\t\t'Id': 'm' + index,\n\t\t\t\t'MetricStat': {\n\t\t\t\t\t'Metric': {\n\t\t\t\t\t\t'MetricName': parts[0],\n\t\t\t\t\t\t'Namespace': 'AWS/S3',\n\t\t\t\t\t\t'Dimensions': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'Name': 'BucketName',\n\t\t\t\t\t\t\t\t'Value': bucket_name\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'Name': 'FilterId',\n\t\t\t\t\t\t\t\t'Value': filter_id\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t'Period': period,\n\t\t\t\t\t'Stat': parts[2],\n\t\t\t\t\t'Unit': parts[1]\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn metric_payload;\n\n\t},\n\tprepareParams: function (params) {\n\t\tvar result = [];\n\n\t\tObject.keys(params).sort().forEach(function (key) {\n\t\t\tif (typeof params[key] !== 'object') {\n\t\t\t\tresult.push(key + '=' + encodeURIComponent(params[key]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push(prepareObject(key, params[key]));\n\t\t\t}\n\t\t});\n\n\t\treturn result.join('&');\n\t},\n\n\trequest: function (method, region, service, request_data) {\n\t\tif (typeof request_data === 'undefined' || request_data === null) {\n\t\t\trequest_data = '';\n\t\t}\n\t\telse {\n\t\t\trequest_data = JSON.stringify(request_data)\n\t\t}\n\n\t\tvar amzdate = (new Date()).toISOString().replace(/\\.\\d+Z/, 'Z').replace(/[-:]/g, ''),\n\t\t\tdate = amzdate.replace(/T\\d+Z/, ''),\n\t\t\thost = service + '.' + region + '.amazonaws.com',\n\t\t\tcanonical_uri = '/';\n\n\t\tif (AWS.params.auth_type === 'role_base') {\n\t\t\tvar canonical_headers = 'content-encoding:amz-1.0\\n' + 'host:' + host + '\\n' + 'x-amz-date:' + amzdate + '\\n' + 'x-amz-security-token:' + AWS.params.Token + '\\n',\n\t\t\t\tsigned_headers = 'content-encoding;host;x-amz-date;x-amz-security-token';\n\t\t} else {\n\t\t\tvar canonical_headers = 'content-encoding:amz-1.0\\n' + 'host:' + host + '\\n' + 'x-amz-date:' + amzdate + '\\n',\n\t\t\t\tsigned_headers = 'content-encoding;host;x-amz-date';\n\t\t}\n\n\t\tvar canonical_request = method + '\\n' + canonical_uri + '\\n' + '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + sha256(request_data),\n\t\t\tcredential_scope = date + '/' + region + '/' + service + '/' + 'aws4_request',\n\t\t\trequest_string = 'AWS4-HMAC-SHA256' + '\\n' + amzdate + '\\n' + credential_scope + '\\n' + sha256(canonical_request),\n\t\t\tkey = AWS.sign('AWS4' + AWS.params.SecretAccessKey, date);\n\n\t\tkey = AWS.sign(key, region);\n\t\tkey = AWS.sign(key, service);\n\t\tkey = AWS.sign(key, 'aws4_request');\n\n\t\tvar request = new HttpRequest(),\n\t\t\turl = 'https://' + host + canonical_uri;\n\n\t\tif (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {\n\t\t\trequest.setProxy(AWS.params.proxy);\n\t\t}\n\t\trequest.addHeader('x-amz-date: ' + amzdate);\n\t\trequest.addHeader('X-Amz-Target: GraniteServiceVersion20100801.GetMetricData')\n\t\trequest.addHeader('Accept: application/json');\n\t\trequest.addHeader('Content-Type: application/json');\n\t\trequest.addHeader('Content-Encoding: amz-1.0');\n\t\trequest.addHeader('Authorization: ' + 'AWS4-HMAC-SHA256 Credential=' + AWS.params.AccessKeyId + '/' + credential_scope + ', ' + 'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + hmac('sha256', key, request_string));\n\t\tif (AWS.params.auth_type === 'role_base')\n\t\t\trequest.addHeader('X-Amz-Security-Token: ' + AWS.params.Token);\n\n\t\tZabbix.log(4, '[ AWS S3 ] Sending request: ' + url);\n\n\t\tresponse = request.post(url, request_data);\n\t\tZabbix.log(4, '[ AWS S3 ] Received response with status code ' + request.getStatus() + ': ' + response);\n\n\t\tif (request.getStatus() !== 200) {\n\t\t\tthrow 'Request failed with status code ' + request.getStatus() + ': ' + response;\n\t\t}\n\n\t\tif (response !== null) {\n\t\t\ttry {\n\t\t\t\tresponse = JSON.parse(response);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tthrow 'Failed to parse response received from AWS CloudWatch API. Check debug log for more information.';\n\t\t\t}\n\t\t}\n\n\t\treturn response;\n\t},\n\n\tgetMetricsData: function () {\n\t\tvar payload = {},\n\t\t\tend_time = Math.floor((new Date().getTime()) / 1000),\n\t\t\tstart_time = end_time - updateInterval;\n\n\t\tpayload['StartTime'] = start_time;\n\t\tpayload['EndTime'] = end_time;\n\t\tpayload['ScanBy'] = 'TimestampDescending';\n\t\tpayload['MetricDataQueries'] = AWS.renderMetricQuery(60, AWS.params.bucket_name, AWS.params.filter_id);\n\t\tresult = AWS.request('POST', AWS.params.region, 'monitoring', payload);\n\t\tif (typeof result !== 'object' || typeof result.MetricDataResults !== 'object') {\n\t\t\tthrow 'Cannot get metrics data from AWS CloudWatch API. Check debug log for more information.';\n\t\t}\n\n\t\treturn result.MetricDataResults;\n\t}\n};\n\ntry {\n\tAWS.setParams(JSON.parse(value));\n\n\treturn JSON.stringify(AWS.getMetricsData());\n}\ncatch (error) {\n\terror += (String(error).endsWith('.')) ? '' : '.';\n\tZabbix.log(3, '[ AWS S3 ] ERROR: ' + error);\n\n\treturn JSON.stringify({'error': error});\n}",
                                "description": "Get bucket request metrics filter: '{#AWS.S3.FILTER.ID.NAME}'.\nFull metrics list related to S3: https://docs.aws.amazon.com/AmazonS3/latest/userguide/metrics-dimensions.html",
                                "preprocessing": [
                                    {
                                        "type": "CHECK_NOT_SUPPORTED",
                                        "parameters": [
                                            "-1"
                                        ]
                                    }
                                ],
                                "timeout": "15s",
                                "parameters": [
                                    {
                                        "name": "AccessKeyId",
                                        "value": "{$AWS.ACCESS.KEY.ID}"
                                    },
                                    {
                                        "name": "auth_type",
                                        "value": "{$AWS.AUTH_TYPE}"
                                    },
                                    {
                                        "name": "bucket_name",
                                        "value": "{$AWS.S3.BUCKET.NAME}"
                                    },
                                    {
                                        "name": "filter_id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    },
                                    {
                                        "name": "proxy",
                                        "value": "{$AWS.PROXY}"
                                    },
                                    {
                                        "name": "region",
                                        "value": "{#AWS.S3.REGION}"
                                    },
                                    {
                                        "name": "SecretAccessKey",
                                        "value": "{$AWS.SECRET.ACCESS.KEY}"
                                    }
                                ],
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "raw"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "f2cff8aa3c3c4a308296550561b02829",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Get",
                                "type": "DEPENDENT",
                                "key": "aws.s3.get_requests[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of HTTP GET requests made for objects in an Amazon S3 bucket. This doesn't include list operations.\nPaginated list-oriented requests, like List Multipart Uploads, List Parts, Get Bucket Object versions, and others, are not included in this metric.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"GetRequests\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "0d9f59f099cb47c8991cc2e353154dc7",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Head",
                                "type": "DEPENDENT",
                                "key": "aws.s3.head_requests[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of HTTP HEAD requests made to an Amazon S3 bucket.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"HeadRequests\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "f9b09dbbf0a44ea9b34a86853a6ebfd0",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: List",
                                "type": "DEPENDENT",
                                "key": "aws.s3.list_requests[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of HTTP requests that list the contents of a bucket.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ListRequests\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "ad753554ca7e45629e7eb144a3595228",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Replication: Operations pending",
                                "type": "DEPENDENT",
                                "key": "aws.s3.operations_pending_replication[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of operations pending replication for a given replication rule.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"OperationsPendingReplication\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "replication"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "9bb4416c7c454e5486a7ce4e4b4b90f0",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Post",
                                "type": "DEPENDENT",
                                "key": "aws.s3.post_requests[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of HTTP POST requests made to an Amazon S3 bucket.\nDelete Multiple Objects and SELECT Object Content requests are not included in this metric.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"PostRequests\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "88a67025c835410eb54d74be96cf5b4c",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Put",
                                "type": "DEPENDENT",
                                "key": "aws.s3.put_requests[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of HTTP PUT requests made for objects in an Amazon S3 bucket.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"PutRequests\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "ac0f6d6f6f2247379d99fa2f4f0ecc11",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Replication: Latency",
                                "type": "DEPENDENT",
                                "key": "aws.s3.replication_latency[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "s",
                                "description": "The maximum number of seconds by which the replication destination region is behind the source Region for a given replication rule.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"ReplicationLatency\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "replication"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "23c13e717a2845399068e7c2e627df4f",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Select, bytes returned",
                                "type": "DEPENDENT",
                                "key": "aws.s3.select_bytes_returned[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "B",
                                "description": "The number of bytes of data returned with Amazon S3 SELECT Object Content requests in an Amazon S3 bucket.\nStatistic: Average (bytes per request).",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"SelectBytesReturned\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "042e84dc68c54390a3d0427b87d89e47",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Select, bytes scanned",
                                "type": "DEPENDENT",
                                "key": "aws.s3.select_bytes_scanned[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "B",
                                "description": "The number of bytes of data scanned with Amazon S3 SELECT Object Content requests in an Amazon S3 bucket.\nStatistic: Average (bytes per request).",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"SelectBytesScanned\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "616ec102597447cdbe2f21186937dcfe",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Requests: Select",
                                "type": "DEPENDENT",
                                "key": "aws.s3.select_requests[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "description": "The number of Amazon S3 SELECT Object Content requests made for objects in an Amazon S3 bucket.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"SelectRequests\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "effa8475024843249ad213d726323e72",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Total request latency, avg",
                                "type": "DEPENDENT",
                                "key": "aws.s3.total_request_latency.avg[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "ms",
                                "description": "The elapsed per-request time from the first byte received to the last byte sent to an Amazon S3 bucket.\nThis includes the time taken to receive the request body and send the response body, which is not included in FirstByteLatency.\nStatistic: Average.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"TotalRequestLatency\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "latency"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            },
                            {
                                "uuid": "886b748066834f01aa2f6f9327fceba0",
                                "name": "Filter [{#AWS.S3.FILTER.ID.NAME}]: Total request latency, p90",
                                "type": "DEPENDENT",
                                "key": "aws.s3.total_request_latency.p90[\"{#AWS.S3.FILTER.ID.NAME}\"]",
                                "delay": "0",
                                "history": "7d",
                                "value_type": "FLOAT",
                                "units": "ms",
                                "description": "The elapsed per-request time from the first byte received to the last byte sent to an Amazon S3 bucket.\nThis includes the time taken to receive the request body and send the response body, which is not included in FirstByteLatency.\nStatistic: 90th percentile.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.[?(@.Label == \"TotalRequestLatency\")].Values.first().first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "aws.s3.get_metrics[\"{#AWS.S3.FILTER.ID.NAME}\"]"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "latency"
                                    },
                                    {
                                        "tag": "component",
                                        "value": "requests"
                                    },
                                    {
                                        "tag": "filter-id",
                                        "value": "{#AWS.S3.FILTER.ID.NAME}"
                                    }
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "aws.s3.get_metrics"
                        },
                        "lld_macro_paths": [
                            {
                                "lld_macro": "{#AWS.S3.FILTER.ID.NAME}",
                                "path": "$.Id"
                            },
                            {
                                "lld_macro": "{#AWS.S3.REGION}",
                                "path": "$.region"
                            }
                        ],
                        "preprocessing": [
                            {
                                "type": "JSONPATH",
                                "parameters": [
                                    "$.filter_id"
                                ]
                            },
                            {
                                "type": "DISCARD_UNCHANGED_HEARTBEAT",
                                "parameters": [
                                    "3h"
                                ]
                            }
                        ]
                    }
                ],
                "tags": [
                    {
                        "tag": "class",
                        "value": "software"
                    },
                    {
                        "tag": "target",
                        "value": "aws"
                    },
                    {
                        "tag": "target",
                        "value": "s3"
                    }
                ],
                "macros": [
                    {
                        "macro": "{$AWS.ACCESS.KEY.ID}",
                        "description": "Access key ID."
                    },
                    {
                        "macro": "{$AWS.AUTH_TYPE}",
                        "value": "access_key",
                        "description": "Authorization method. Possible values: role_base, access_key."
                    },
                    {
                        "macro": "{$AWS.PROXY}",
                        "description": "Sets HTTP proxy value. If this macro is empty then no proxy is used."
                    },
                    {
                        "macro": "{$AWS.S3.BUCKET.NAME}",
                        "description": "S3 bucket name."
                    },
                    {
                        "macro": "{$AWS.S3.LLD.FILTER.ALARM_NAME.MATCHES}",
                        "value": ".*",
                        "description": "Filter of discoverable alarms by name."
                    },
                    {
                        "macro": "{$AWS.S3.LLD.FILTER.ALARM_NAME.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Filter to exclude discovered alarms by name."
                    },
                    {
                        "macro": "{$AWS.S3.LLD.FILTER.ID.NAME.MATCHES}",
                        "value": ".*",
                        "description": "Filter of discoverable request metrics by filter ID name."
                    },
                    {
                        "macro": "{$AWS.S3.LLD.FILTER.ID.NAME.NOT_MATCHES}",
                        "value": "CHANGE_IF_NEEDED",
                        "description": "Filter to exclude discovered request metrics by filter ID name."
                    },
                    {
                        "macro": "{$AWS.S3.UPDATE.INTERVAL}",
                        "value": "1800",
                        "description": "Interval in seconds for getting request metrics. Used in the metric configuration and in the JavaScript API query. Must be between 1 and 86400 seconds."
                    },
                    {
                        "macro": "{$AWS.SECRET.ACCESS.KEY}",
                        "type": "SECRET_TEXT",
                        "description": "Secret access key."
                    }
                ],
                "valuemaps": [
                    {
                        "uuid": "5f232f40f02246ab843c9aacdcf8d5c5",
                        "name": "Alarm state",
                        "mappings": [
                            {
                                "value": "0",
                                "newvalue": "OK"
                            },
                            {
                                "value": "1",
                                "newvalue": "Insufficient data"
                            },
                            {
                                "value": "2",
                                "newvalue": "Alarm"
                            },
                            {
                                "value": "255",
                                "newvalue": "Unknown"
                            }
                        ]
                    }
                ]
            }
        ]
    }
}